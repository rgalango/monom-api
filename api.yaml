openapi: 3.0.3
info:
  title: Monom API
  description: MonoM API specification.
  version: v1
servers:
  - url: https://api.monom.ai/v1
  - url: https://api.dev.monom.ai/v1

security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    mobile.PaginatedAssetTree:
      allOf:
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/mobile.AssetTreeNode"
        - $ref: "#/components/schemas/common.Pagination"
    mobile.AssetTreeNode:
      type: object
      properties:
        id:
          type: string
          example: 61a68a2cd8c6514768d5a809
        name:
          type: string
          example: Motor 1
        type:
          type: string
          example: 61a68a2cd8c6514768d5a809
          description: asset type id
        status:
          $ref: "#/components/schemas/master-data.Severity"
        unacknowledgedAlerts:
          type: integer
          description: Ony shows when
          example: 10
        parent:
          $ref: "#/components/schemas/mobile.ParentTreeNode"
        descendantsByType:
          type: array
          description: a map with the number of descendents by type
          items:
            type: object
            properties:
              type:
                type: string
                example: 61a68a2cd8c6514768d5a809
                description: asset type id
              count:
                type: integer
                format: int32
                example: 3
    mobile.ParentTreeNode:
      type: object
      properties:
        id:
          type: string
          example: 61a68a2cd8c6514768d5a809
        name:
          type: string
          example: Motor 1
        parent:
          $ref: "#/components/schemas/mobile.ParentTreeNode"
          example:
            id: 61a68a2cd8c6514768d5a809
            name: Motor
    mobile.BasicAsset:
      type: object
      properties:
        id:
          type: string
          description: asset id
          example: 88888222661562166afd4f147
        name:
          type: string
          description: asset name
          example: Pump 1
        type:
          type: string
          description: asset type
          example: 88888222661562166afd4f147
        childrenByType:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: asset type id
                example: 88888222661562166afd4f147
              total:
                type: integer
                description: Number of assets of this type
                example: 3
          description: a map with the number of children grouped by type
    mobile.AlertsBySeverity:
      type: object
      properties:
        alertsBySeverity:
          type: array
          description: a map with the number of alerts by severity
          items:
            allOf:
              - $ref: "#/components/schemas/master-data.Severity"
              - type: object
                properties:
                  count:
                    type: integer
                    format: int32
    mobile.PaginatedAlerts:
      allOf:
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/mobile.AlertResult"
        - $ref: "#/components/schemas/common.Pagination"
    mobile.AlertResult:
      type: object
      properties:
        id:
          type: string
          description: alert id
          example: 88888222661562166afd4f147
        alarmName:
          type: string
          description: the name of the alert
          example: Alarm x
        assetName:
          type: string
          description: the name of the asset
          example: Motor
        maxSeverity:
          $ref: "#/components/schemas/master-data.Severity"
        active:
          type: boolean
          description: whether the alert still is active
        acknowledged:
          type: boolean
          description: whether the alert has been acknowledged
        hasFeedback:
          type: boolean
          description: whether the alert has been fed back
    asset.AssetPagination:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/asset.AssetPaginationItem"
        totalElements:
          type: integer
        _links:
          type: object
          properties:
            next:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/assets?page=3
            self:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/assets?page=2
            prev:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/assets?page=1
    asset.BaseAsset:
      type: object
      properties:
        name:
          type: string
          example: Motor 1
        type:
          type: string
          example: MOTOR
        tags:
          type: array
          example:
            - motor
            - madrid
          items:
            type: string
        image:
          $ref: "#/components/schemas/asset.AssetResource"
        description:
          type: string
          example: Motor Example Configuration
        parentId:
          type: string
          example: 61a68a2cd8c6514768d5a809
        position:
          type: number
          example: 0
        attributes:
          type: array
          items:
            properties:
              name:
                type: string
                example: Fabricante
              type:
                type: string
                enum:
                  - string
                  - numeric
                example: string
              value:
                type: object
                example: Tesla Motors
              magnitudeId:
                type: string
                example: 61a68a2cd8c6514768d5a809
              magnitudeName:
                type: string
                example: Pontencial El√©ctrico
              unitId:
                type: string
                example: 61a68a2cd8c6514768d5a809
              unitName:
                type: string
                example: Hz
        resources:
          type: array
          items:
            $ref: "#/components/schemas/asset.AssetResource"
        created:
          type: object
          properties:
            by:
              type: string
              example: John Doe
            at:
              type: string
              format: date-time
              example: 2020-01-24T15:00:22.222
        updated:
          type: object
          properties:
            by:
              type: string
              example: Manolo Di Souza
            at:
              type: string
              format: date-time
              example: 2020-01-26T15:00:22.222
    asset.Asset:
      allOf:
        - $ref: "#/components/schemas/asset.BaseAsset"
        - type: object
          properties:
            id:
              type: string
              example: 61a68a2cd8c6514768d5a809
    asset.AssetTreeNode:
      properties:
        id:
          type: string
          example: 61a68a2cd8c6514768d5a809
        name:
          type: string
          example: Motor 1
        parentId:
          type: string
          example: 61a68a2cd8c6514768d5a809
        hasAttributes:
          type: boolean
          example: true
        numDescendants:
          type: integer
          example: 0
        assetType:
          type: string
          example: 61a68a2cd8c6514768d5a809
    asset.AssetTreeNodeWithDescendants:
      properties:
        id:
          type: string
          example: 61a68a2cd8c6514768d5a809
        name:
          type: string
          example: Motor 1
        parentId:
          type: string
          example: 61a68a2cd8c6514768d5a809
        hasAttributes:
          type: boolean
          example: true
        descendants:
          type: array
          items:
            $ref: "#/components/schemas/asset.AssetTreeNodeWithDescendants"
    asset.Tags:
      type: array
      items:
        type: string
        example: SMALL
    asset.Attributes:
      type: array
      items:
        type: string
        example: Temperature
    asset.AssetPaginationItem:
      allOf:
        - $ref: "#/components/schemas/asset.Asset"
        - type: object
          properties:
            typeName:
              type: string
              example: Areas
            dynamicProperties:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: M1V__5kHz
                  type:
                    type: string
                    example: FEEDTOPROPERTY
    asset.AssetPatch:
      type: object
      properties:
        imageId:
          type: string
          example: "1234"
        parentId:
          type: string
          example: "-1"
        position:
          type: number
          example: 0
    asset.AssetResource:
      type: object
      properties:
        id:
          type: string
          example: 878698715687gt72166afd4f147
        name:
          type: string
          example: Product specifications
        fileName:
          type: string
          example: Specifications_v1.pdf
        uri:
          type: string
          example: https://api.monom.ai/assets/8bsadsada-25asdgdf-sdasd594-basdf451asda/resources/1234/example.pdf
    asset.ThresholdAlarmPagination:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/asset.ThresholdAlarm"
        _links:
          type: object
          properties:
            next:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/projects/monom1/assets/threshold-alarms?page=3
            self:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/projects/monom1/assets/threshold-alarms?page=2
            prev:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/projects/monom1/assets/threshold-alarms?page=1
    asset.ThresholdAlarm:
      type: object
      properties:
        id:
          type: string
          example: uytii67ti6it76r7
        name:
          type: string
          example: My Alarm name
        assetId:
          type: string
          example: 88888222661562166afd4f147
        attributeName:
          type: string
          example: Temperature
        windowTimeInMs:
          type: number
          example: 60000
        hysteresis:
          type: number
          example: 5
        intervals:
          type: array
          items:
            $ref: "#/components/schemas/asset.ThresholdAlarmInterval"
        severities:
          type: array
          items:
            $ref: "#/components/schemas/asset.ThresholdAlarmSeverities"
        configuration:
          $ref: "#/components/schemas/asset.ThresholdAlarmConfiguration"
    asset.ThresholdAlarmInterval:
      type: object
      properties:
        severity:
          type: number
          example: 1
        label:
          type: string
          example: Severe interval label
        type:
          type: string
          example: BT
        value:
          type: string
          example: 1.5_2.0
    asset.ThresholdAlarmSeverities:
      type: object
      properties:
        default:
          type: object
          properties:
            hexColor:
              type: string
              example: "#FF891C"
            name:
              type: string
              example: OK
        thresholds:
          type: array
          items:
            $ref: "#/components/schemas/asset.Threshold"
    asset.Threshold:
      type: object
      properties:
        name:
          type: string
          example: HIGH
        hexColor:
          type: string
          example: "#FF891C"
        min:
          type: number
          example: 5
        max:
          type: number
          example: 10
    asset.ThresholdAlertPagination:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/asset.ThresholdAlert"
        _links:
          type: object
          properties:
            next:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/projects/monom1/assets/threshold-alerts?page=3
            self:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/projects/monom1/assets/threshold-alerts?page=2
            prev:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/projects/monom1/assets/threshold-alerts?page=1
    asset.ThresholdAlert:
      type: object
      properties:
        id:
          type: string
          example: uytii67ti6it76r7
        severity:
          type: number
          example: 100
        assetName:
          type: string
          example: Troqueladora_LF45
        alarmId:
          type: string
          example: 78687h7r83gheg97
        alarmName:
          example: MaxTemperature
        assetId:
          type: string
          example: 1726bh6vt87gv79
        condition:
          type: string
          example: < 1330 AND <= 2000
        status:
          type: boolean
          example: true
        start:
          type: string
          example: 12/01/21 12:30
        finished:
          type: string
          example: 12/01/21 12:30
        recognized:
          type: boolean
          example: false
        alreadyRecognized:
          type: boolean
          example: false
    asset.ThresholdAlertAcknowledges:
      type: array
      items:
        $ref: "#/components/schemas/asset.ThresholdAlertAcknowledge"
    asset.ThresholdAlertAcknowledge:
      type: object
      properties:
        id:
          type: string
          example: uytii67ti6it76r7
    asset.ThresholdAlarmConfiguration:
      type: object
      properties:
        repetition:
          type: number
          example: 2
    asset.Status:
      type: object
      properties:
        assetId:
          type: string
          example: uytii67ti6it76r7
        status:
          type: object
          properties:
            unacknowledged:
              type: boolean
            severity:
              type: number
            lastSeverityChange:
              type: string
              format: date-time
              example: 2020-01-24T15:00:22.222Z
    common.CountResult:
      type: object
      properties:
        total:
          type: number
          example: 348
    common.MonomError:
      type: object
      properties:
        requestId:
          type: string
          example: "1832977e-1"
        timestamp:
          type: string
          example: 2022-04-06T10:41:17.897669Z
        status:
          type: string
          example: "400"
        code:
          type: string
        message:
          type: string
          example: "Validation failed for resource: fooTest. Errors found: 1"
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: lastName
              message:
                type: string
                example: lastName cannot be empty
    common.Pagination:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/common.Page"
        _links:
          $ref: "#/components/schemas/common.Links"
    common.Page:
      type: object
      properties:
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        number:
          type: integer
          example: 1
    common.Links:
      type: object
      properties:
        prev:
          type: object
          properties:
            href:
              type: string
              example: https://api.monom.ai/v1/resources?page=1
        self:
          type: object
          properties:
            href:
              type: string
              example: https://api.monom.ai/v1/resources?page=2
        next:
          type: object
          properties:
            href:
              type: string
              example: https://api.monom.ai/v1/resources?page=3
    common.PatchBody:
      type: array
      items:
        $ref: "#/components/schemas/common.PatchDocument"
    common.PatchDocument:
      type: object
      description: A JSONPatch document as defined by RFC 6902
      required:
        - op
        - path
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - add
            - remove
            - replace
            - move
            - copy
            - test
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.
    common.TimeRange:
      type: object
      properties:
        startDate:
          type: number
          example: 1733517346000
        endDate:
          type: number
          example: 1733517346000
    common.DateRange:
      type: object
      required:
        - from
      properties:
        from:
          type: string
          format: date-time
          example: 2020-01-24T15:00:22.222Z
        to:
          type: string
          format: date-time
          example: 2020-01-24T15:00:22.222Z
    common.TimeMetric:
      type: object
      properties:
        value:
          type: integer
          format: int32
          description: the value of the time metric
          example: 30
        unit:
          type: string
          enum:
            - ms
            - s
            - m
            - h
            - d
            - week
            - month
            - year
          description: |
            Unit of time in which the value is expressed:
             * `ms` - Milliseconds
             * `s` - Seconds
             * `m` - Minutes
             * `h` - Hours
             * `d` - Days
             * `week` - Weeks
             * `month` - Months
             * `year` - Years
          example: m
    common.User:
      type: object
      properties:
        id:
          type: string
          example: 78Y8-8H079H0-H789H
        fullName:
          type: string
          example: John Doe
        email:
          type: string
          example: name@domain.com
        phone:
          type: string
          example: "987654321"
        dashbordKey:
          type: string
          example: 98uj978-89y78
        roles:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
        lastLogin:
          type: string
          format: date-time
          example: 2022-04-13T07:27:12.574+00:00
    common.CreateUser:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: name@domain.com
    common.ModifyUser:
      type: object
      required:
        - fullName
      properties:
        fullName:
          type: string
          example: John Doe
        phone:
          type: string
          example: "987654321"
        lastLogin:
          type: string
          format: date-time
          example: 2022-04-13T07:27:12.574+00:00
    common.Project:
      type: object
      properties:
        id:
          type: string
          example: 88888-2555551asdas-dasd54-adasd54fa
        name:
          type: string
          example: Project1
        shortName:
          type: string
          example: PRO1
        description:
          type: string
          example: Big Project
        organizationId:
          type: string
          example: 89790-189hwj128-1w891jh09
    common.Role:
      type: object
      properties:
        id:
          type: string
          example: 89790-189hwj128-1w891jh09
        name:
          type: string
          example: Administrator
        totalUsers:
          type: integer
          example: 20
    common.Group:
      type: object
      properties:
        id:
          type: string
          example: 89790-189hwj128-1w891jh09
        name:
          type: string
          example: Admins
    common.GroupWithTotalUsers:
      type: object
      properties:
        id:
          type: string
          example: 89790-189hwj128-1w891jh09
        name:
          type: string
          example: Admins
        totalUsers:
          type: integer
          example: 20
    common.GroupWithTotalUsersAndRoles:
      type: object
      properties:
        id:
          type: string
          example: 89790-189hwj128-1w891jh09
        name:
          type: string
          example: Admins
        totalUsers:
          type: integer
          example: 20
        roles:
          type: array
          items:
            type: string
    common.EditGroup:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Admins
    common.CreateUserRole:
      type: object
      properties:
        userId:
          type: string
          example: 89790-189hwj128-1w891jh09
        roleId:
          type: string
          example: 798h2-80n809m990-89h79h97
    common.CreateUserGroup:
      type: object
      properties:
        userId:
          type: string
          example: 89790-189hwj128-1w891jh09
        groupId:
          type: string
          example: 798h2-80n809m990-89h79h97
    connectivity.ConnectorSchemaList:
      title: ConnectorSchemaList
      type: object
      properties:
        id:
          type: string
          example: 12156156-fads484fd78ad-4fds897g894af
        type:
          type: string
          example: datom
    connectivity.ConnectorSchema:
      title: ConnectorSchema
      type: object
      properties:
        id:
          type: string
          example: 12156156-fads484fd78ad-4fds897g894af
        type:
          type: string
          example: datom
        configurationSchema:
          type: object
    connectivity.Device:
      title: Device
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        name:
          type: string
        description:
          type: string
        totalModules:
          type: integer
        meta:
          type: object
    connectivity.DeviceStatus:
      title: DeviceStatus
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        status:
          $ref: "#/components/schemas/connectivity.StatusEnum"
    connectivity.Module:
      title: Module
      required:
        - deviceId
        - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        deviceId:
          type: string
        connectorId:
          type: string
        type:
          type: string
        model:
          type: string
        serialNumber:
          type: string
        configuration:
          type: object
    connectivity.ModuleItem:
      title: Module
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        feeds:
          type: integer
    connectivity.CreateModifyModule:
      title: Save Module data
      type: object
      required:
        - name
        - connectorId
        - type
      properties:
        name:
          type: string
        connectorId:
          type: string
        type:
          type: string
        model:
          type: string
        serialNumber:
          type: string
        configuration:
          type: object
    connectivity.ModuleStatus:
      title: ModuleStatus
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        deviceId:
          type: string
        status:
          $ref: "#/components/schemas/connectivity.StatusEnum"
    connectivity.ModuleList:
      title: ModuleList
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
    connectivity.StatusEnum:
      type: string
      enum:
        - OK
        - WARN
        - ERROR
        - DEPLOYING
        - DEPLOY_FAILED
    connectivity.ModulePagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/connectivity.ModuleItem"
        total:
          type: integer
    connectivity.FeedList:
      type: array
      example:
        - feedName1
        - feedName2
      items:
        type: string
    mobile.DashboardResponse:
      type: object
      properties:
        projectId:
          type: string
          example: 615865149841asd8846
        assetId:
          type: string
          example: 615865149841asd8846
        owner:
          type: string
          example: test@monom.ai
        widgets:
          type: array
          items:
            $ref: "#/components/schemas/mobile.Widgets"
    mobile.DashboardRequest:
      type: object
      properties:
        widgets:
          type: array
          items:
            $ref: "#/components/schemas/mobile.Widgets"
    mobile.Widgets:
      type: object
      properties:
        id:
          type: string
          example: 615865149841asd8846
        name:
          type: string
          example: Widget Name
        widgetChart:
          type: string
          enum:
            - gauge
            - pie
            - trend
            - bar
            - term
            - metric
          example: gauge
        dynamicProperties:
          type: array
          items:
            type: string
            example: M1A__dc
        range:
          $ref: "#/components/schemas/mobile.Range"
    mobile.Range:
      type: object
      properties:
        min:
          type: number
          example: 0
        max:
          type: number
          example: 100
    dashboard.Dashboards:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/dashboard.Dashboard"
    dashboard.Dashboard:
      type: object
      properties:
        id:
          type: string
          example: 7u678utyu76t87
        assetId:
          type: string
          example: 7uuy9i96iy979iy9
        name:
          type: string
          example: MyAssetDashboard
        url:
          type: string
          example: https://dashboards.monom.ai/asset/u8u98y/dashboard/78uiiy6
        default:
          type: boolean
          example: false
    data-flow.AssetPagination:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/data-flow.Asset"
        page:
          type: object
          properties:
            size:
              type: integer
              example: 20
            totalElements:
              type: integer
              example: 100
            totalPages:
              type: integer
              example: 5
            number:
              type: integer
              example: 1
        _links:
          type: object
          properties:
            prev:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/app/data-flows?page=1&limit=20&sort=name:asc&asset-types=id1,id2,id3
            self:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/app/data-flows?page=2&limit=20&sort=name:asc&asset-types=id1,id2,id3
            next:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.monom.ai/v1/app/data-flows?page=3&limit=20&sort=name:asc&asset-types=id1,id2,id3
    data-flow.Asset:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: 60f59b87e0498896dcf85451
            type:
              type: object
              properties:
                id:
                  type: string
                  example: 60f59b87e0498896dcf85451
                name:
                  type: string
                  example: MOTOR
                iconUrl:
                  type: string
                  example: https://storage.googleapis.com/monomizer-dev-resources/images/assets/motor.svg
                description:
                  type: string
                  example: Represents an engine element
            name:
              type: string
              example: Gas turbine
            flowCount:
              type: number
              example: 5
            dataFlowSetPublish:
              allOf:
                - type: object
                  properties:
                    id:
                      type: string
                      example: 60f59b87e0498896dcf85451
                    publishDateTime:
                      type: string
                      format: date-time
                      example: 2022-01-23T18:47:17.818Z
            dataFlowSetDraft:
              allOf:
                - type: object
                  properties:
                    id:
                      type: string
                      example: 60f59b87e0498896dcf85451
                    owner:
                      type: string
                      example: test-owner@monom.ai
            previousVersionsCount:
              type: number
    data-flow.DataFlowSet:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          example: 60f59b87e0498896dcf85451
        owner:
          readOnly: true
          type: string
          description: The email of the user who is currently editing the DFS
          example: test@monom.ai
        status:
          readOnly: true
          type: string
          example: DRAFT
          enum:
            - DRAFT
            - DISCARD
            - PUBLISH
            - INACTIVE
        assetId:
          readOnly: true
          type: string
          example: 60f59b87e0498896dcf85451
        projectId:
          readOnly: true
          type: string
          example: 60f59b87e0498896dcf85451
        version:
          readOnly: true
          type: number
        publishDate:
          readOnly: true
          type: string
          format: date-time
        windowTimesMs:
          type: number
          example: 1000
          description: Time interval to fetch feeds as inputs
        windowTimesUnit:
          type: string
          enum:
            - ms
            - s
            - m
            - h
            - d
            - week
            - month
            - year
          description: |
            Unit of time in which the windowTimesMs field is expressed:
               * `ms` - Milliseconds
               * `s` - Seconds
               * `m` - Minutes
               * `h` - Hours
               * `d` - Days
               * `week` - Weeks
               * `month` - Months
               * `year` - Years
          example: ms
        dataFlows:
          type: array
          items:
            $ref: "#/components/schemas/data-flow.DataFlow"
    data-flow.DataFlow:
      properties:
        id:
          type: string
          example: 60f59b87e0498896dcf85451
        type:
          type: string
          enum:
            - DIRECT
            - COMPLEX
          description: the kind of Data Flow. It can be for DIRECT or COMPLEX properties
          example: DIRECT
        flowId:
          type: string
          description: The identifier of the flow corresponding to this published Data Flow
          example: 60f59b87e0498896dcf85451
        name:
          type: string
          description: The name of the Data Flow (aka group)
          example: Average Motor Temperature
        operations:
          type: array
          items:
            $ref: "#/components/schemas/data-flow.Operation"
    data-flow.Operation:
      type: object
      properties:
        id:
          type: string
          example: 60f59b87e0498896dcf85451
        name:
          type: string
          description: The name of the Operation
          example: Frequency
        input:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/data-flow.InputOutput"
              - type: object
                properties:
                  inputType:
                    type: string
                    enum:
                      - FEED
                      - PROPERTY
                      - BRIDGE
                    description: the input type
                    example: FEED
                  dataSourceName:
                    type: string
                    description: the name of the data source from which the entry was generated
                    example: Datom test
                  toId:
                    type: string
                    description: the id of the target element (operation or output). Acts as a
                      foreign key to identify the specific element when there
                      are repeated elements (several occurrences of an element).
                    example: 60f59b87e0498896dcf85451
        operator:
          type: object
          properties:
            id:
              type: string
              example: 60f59b87e0498896dcf85451
            order:
              type: integer
              format: int32
              description: the order of this operator among other operator elements in the
                same Data Flow
            type:
              type: string
              enum:
                - SCRIPT
                - FEEDTOPROPERTY
              example: SCRIPT
            name:
              type: string
              description: operation name. Usually it is the algorithm name
              example: Average Motor Temperature
            algorithmId:
              type: string
              example: 60f59b87e0498896dcf85451
            algorithmUrl:
              type: string
              example: http://...
            inputs:
              type: array
              items:
                $ref: "#/components/schemas/data-flow.AlgorithmIO"
            outputs:
              type: array
              items:
                $ref: "#/components/schemas/data-flow.AlgorithmIO"
            operatorId:
              type: string
              example: 60f59b87e0498896dcf85451
        output:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/data-flow.InputOutput"
              - type: object
                properties:
                  outputType:
                    type: string
                    enum:
                      - PROPERTY
                      - BRIDGE
                    description: the input type
                    example: PROPERTY
                  fromId:
                    type: string
                    description: the id of the source element (operation or input). Acts as a
                      foreign key to identify the specific element when there
                      are repeated elements (several occurrences of an element).
                    example: 60f59b87e0498896dcf85451
    data-flow.InputOutput:
      allOf:
        - $ref: "#/components/schemas/data-flow.WithUnit"
        - type: object
          properties:
            id:
              type: string
              example: 60f59b87e0498896dcf85451
            order:
              type: integer
              format: int32
              description: the order of this input among other input elements in the same Data
                Flow
            from:
              type: string
              description: the name of the input
              example: feed_temp_motor
            to:
              type: string
              description: Operator input argument name. It is the destination
              example: INPUT_1
            dataType:
              type: string
              example: SCALAR
              enum:
                - SCALAR
                - WAVEFORM
                - PULSETRAIN
                - SPECTRUM
                - VECTOR
                - IMAGE
                - OTHER
            disconnected:
              type: boolean
    data-flow.AlgorithmIO:
      allOf:
        - $ref: "#/components/schemas/data-flow.WithUnit"
        - type: object
          properties:
            name:
              type: string
              example: Input 1
            type:
              type: string
              enum:
                - SCALAR
                - WAVEFORM
                - PULSETRAIN
                - SPECTRUM
                - VECTOR
                - IMAGE
                - OTHER
              example: SCALAR
            description:
              type: string
              example: First input in sum operation
    data-flow.WithUnit:
      type: object
      properties:
        magnitudeId:
          type: string
          description: id of the magnitude. Optional
          example: 60f59b87e0498896dcf85451
        magnitudeName:
          type: string
          description: the name of the magnitude. Optional
          example: Temperature
        unitId:
          type: string
          description: id of the unit. Optional
          example: 60f59b87e0498896dcf85451
        unitName:
          type: string
          description: the name of the unit. Optional
          example: Celsius
        unitSymbol:
          type: string
          description: the symbolo of the unit. Optional
          example: ¬∫C
    data-flow.DataFlowSetPatch:
      type: object
      properties:
        owner:
          type: string
        status:
          type: string
          enum:
            - PUBLISH
            - DRAFT
            - VALIDATED
            - INACTIVE
            - DISCARD
    data-flow.DataSource:
      type: object
      properties:
        name:
          type: string
          example: Datom test
        dataSourceId:
          type: string
          example: 60f59b87e0498896dcf85451
    data-flow.Feed:
      type: object
      properties:
        name:
          type: string
          example: feed_temp_motor
        dataSourceName:
          type: string
          example: Datom test
        dataType:
          type: string
          example: SCALAR
        magnitudeId:
          type: string
          description: the magnitude id. Optional.
          example: 60f59b87e0498896dcf85451
        unitId:
          type: string
          description: the unit id. Optional.
          example: 60f59b87e0498896dcf85451
    data-flow.Property:
      type: object
      properties:
        name:
          type: string
          example: average_temp_motor
    data-flow.Operator:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: SCRIPT
        projectId:
          type: string
          example: 60f59b87e0498896dcf85451
        icon:
          type: string
    data-flow.AlgorithmList:
      type: object
      properties:
        id:
          type: string
          example: 60f59b87e0498896dcf85451
        name:
          type: string
          example: Script Average Temperature
        projectId:
          type: string
          example: 60f59b87e0498896dcf85451
        operatorId:
          type: string
          example: 60f59b87e0498896dcf85451
    data-flow.Algorithm:
      type: object
      properties:
        id:
          type: string
          example: 60f59b87e0498896dcf85451
        name:
          type: string
          example: Script Average Temperature
        projectId:
          type: string
          example: 60f59b87e0498896dcf85451
        operatorId:
          type: string
          example: 60f59b87e0498896dcf85451
        type:
          type: string
          example: SCRIPT
          enum:
            - SCRIPT
            - FEEDTOPROPERTY
        inputs:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  name:
                    type: string
                    example: Input 1
                  type:
                    type: string
                    example: SCALAR
                    enum:
                      - SCALAR
                      - WAVEFORM
                      - SPECTRUM
                  description:
                    type: string
        outputs:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  type:
                    type: string
                    example: SCALAR
                    enum:
                      - SCALAR
                      - WAVEFORM
                      - SPECTRUM
                  name:
                    type: string
                    example: Output 1
                  description:
                    type: string
        description:
          type: string
          description: Feature of operator
        metadata:
          type: object
          description: Diferents configuration properties about operator type
    data-intake.Feed:
      type: object
      required:
        - id
        - name
        - timestamp
        - type
        - value
      properties:
        id:
          type: string
          example: 86d893c1-74c5-4cff-8a71-954f8c7b3f5c
        name:
          type: string
          example: temperature
        type:
          type: string
          description: Feed Type
          example: SCALAR
          enum:
            - SCALAR
            - WAVEFORM
            - PULSETRAIN
            - SPECTRUM
            - VECTOR
            - IMAGE
            - BLOB
        value:
          type: object
          example: 12.0456
        timestamp:
          type: number
          format: double
          example: "1638198638606.1236"
        metadata:
          type: object
          example:
            unit: C
    data-intake.BulkResponse:
      type: object
      properties:
        success:
          type: integer
          example: 2
        total:
          type: integer
          example: 2
        errors:
          type: integer
          example: 0
        info:
          type: array
          items:
            type: string
          example:
            - Incorrect timestamp
    edge.Processing:
      type: object
      properties:
        processingId:
          type: string
          description: Unique identifier in the monom vision solution to processing module.
          example: processing_1
        status:
          type: string
          description: Status of the processing.
          example: ok
          enum:
            - connecting
            - ok
            - bad_configuration
            - error_connection
        processingEnabled:
          type: boolean
          description: Whether process is enabled or not.
    edge.ProcessingProperties:
      type: object
      properties:
        processingEnabled:
          type: boolean
          nullable: true
          description: Whether process is enabled or not.
          example: true
    edge.ProcessingEnabled:
      type: object
      properties:
        status:
          type: boolean
          nullable: true
          description: Whether process is enabled or not in all solution.
          example: true
    edge.AvailableDisplays:
      type: object
      properties:
        displayNames:
          type: array
          example:
            - raw
            - output_processing_1
            - output_processing_2
          items:
            type: string
    edge.Size:
      type: object
      properties:
        width:
          type: number
          description: Width
          example: 640
        height:
          type: number
          description: Height
          example: 480
    edge.ImageProperty:
      type: object
      properties:
        size:
          $ref: "#/components/schemas/edge.Size"
        colorPallet:
          type: string
          nullable: true
          description: Color pallet of the display. This property is only applied when the
            image has one channel. If this variable = "none", the pallet is not
            applied.
          example: magma
          enum:
            - none
            - magma
    edge.DisplayProperties:
      type: object
      properties:
        displayName:
          type: string
          description: Name of the available display you want to show.
          example: raw
        status:
          type: string
          nullable: true
          description: Status of the display.
          example: play
          default: play
          enum:
            - play
            - pause
        dataType:
          type: string
          nullable: true
          description: Data type of the display. The display can show the raw image or
            annotation image.
          example: raw
          default: raw
          enum:
            - raw
            - annotation
        image:
          description: Configuration of the image sent in the display.
          nullable: true
          $ref: "#/components/schemas/edge.ImageProperty"
    edge.Offer:
      type: object
      properties:
        displayName:
          type: string
          description: Name of the display
          example: raw
        status:
          type: string
          description: Status of the display.
          default: play
          example: play
          enum:
            - play
            - pause
        dataType:
          type: string
          description: Data type of the display. The display can show the raw image or
            annotation image.
          default: raw
          example: raw
          enum:
            - raw
            - annotation
        image:
          description: Configuration of the image sent in the display.
          nullable: true
          $ref: "#/components/schemas/edge.ImageProperty"
        sdp:
          type: string
          description: WebRtc protocol connection identification
          example: C152aV5s2aa52Vs4df26
        type:
          type: string
          description: WebRtc protocol type connection
          example: C152aV5s2aa52Vs4df26
    edge.Answer:
      type: object
      properties:
        displayId:
          type: string
          description: Id of the display connection.
          example: 12f5-d45g-54s6-f852
        displayProperties:
          nullable: true
          description: properties the display created.
          $ref: "#/components/schemas/edge.DisplayProperties"
        sdp:
          type: string
          description: WebRtc protocol connection identification
          example: C152aV5s2aa52Vs4df26
        type:
          type: string
          description: WebRtc protocol type connection
          example: C152aV5s2aa52Vs4df26
    edge.Storage:
      type: object
      properties:
        status:
          type: string
          description: Status of the storage module.
          example: ok
          enum:
            - connecting
            - ok
            - bad_configuration
            - error_connection
        storageEnabled:
          type: boolean
          description: Whether storage is enabled or not.
    edge.StorageProperties:
      type: object
      properties:
        storageEnabled:
          type: boolean
          nullable: true
          description: enable or disable the storage.
          example: true
    edge.Event:
      type: object
      properties:
        projectId:
          type: string
          description: Project id of the event.
          example: 12f5-d45g-54s6-f852
        deviceId:
          type: string
          description: Device id of the event.
          example: 12f5-d45g-54s6-f852
        eventId:
          type: string
          description: Event id of the event.
          example: 12f5-d45g-54s6-f852
        correlationId:
          type: string
          description: Correlation id of the event.
          example: 12f5-d45g-54s6-f852
        timestamp:
          type: number
          description: Timestamp of the event.
          example: 12225201
        dataType:
          type: string
          description: Data type of the event.
          example: image_matrix
        name:
          type: string
          description: Name of the event.
          example: prediction
        value:
          type: string
          description: Value of the event.
          example: good
        metadata:
          type: object
          additionalProperties: true
    edge.Link:
      type: object
      properties:
        rel:
          type: string
          description: Number of the page
          example: first
          enum:
            - first
            - prev
            - next
            - self
            - last
        href:
          type: string
          description: Url to the page indicate in rel parameter.
          example: http://localhost:8000/api/edge/v1/events?page=1&limit=1&deviceId=cam2
    edge.Page:
      type: object
      properties:
        number:
          type: number
          description: Number of the page.
          example: 1
        size:
          type: number
          description: Size of the elements returned.
          example: 1
        totalPages:
          type: number
          description: Total number of the pages to filters applied.
          example: 1
        totalElements:
          type: number
          description: Total number of the elements to filters applied.
          example: 1
        links:
          type: array
          items:
            $ref: "#/components/schemas/edge.Link"
        content:
          type: array
          items:
            $ref: "#/components/schemas/edge.Event"
    edge.Device:
      type: object
      properties:
        deviceId:
          type: string
          description: Unique identifier in the monom vision solution.
          example: cam1
        nameSelector:
          type: string
          description: Name to show in the device selector.
          example: FLIR Systems FLIR A50(125202)
        system:
          type: string
          description: System of the device.
          example: gigeVision
          enum:
            - gigeVision
            - usb3Vision
            - unknown
        status:
          type: string
          description: Status of the device.
          example: connect
          enum:
            - connecting
            - configuration
            - ok
            - bad_configuration
        mode:
          type: string
          description: Mode of the device grab.
          example: continuous
          enum:
            - continuous
            - single_shot
            - stop
            - disconnect
    edge.DeviceProperties:
      type: object
      properties:
        mode:
          type: string
          description: Mode of the device. You can select the mode acquisition and
            disconnect the device.
          nullable: true
          example: connect
          enum:
            - continuous
            - single_shot
            - stop
            - disconnect
    feedback.FeedbackAssetRequest:
      type: object
      required:
        - failureModeId
        - severityId
        - dateRange
        - dynamicProperties
      properties:
        failureModeId:
          type: string
          example: 6458asd489786asd
        severityId:
          type: string
          example: 6458asd489786asd
        dynamicProperties:
          type: array
          items:
            type: string
            example: M1H__1KhZ
        dateRange:
          type: object
          $ref: "#/components/schemas/common.DateRange"
        description:
          type: string
        recommendation:
          type: string
    feedback.FeedbackAlertRequest:
      type: object
      required:
        - assetId
        - alertsId
        - rightAlerts
      properties:
        alertsId:
          type: array
          minItems: 1
          description: set of alerts for this feedback.
          items:
            type: string
            example: 615sad8fg56780
        assetId:
          type: string
          example: 88888222661562166afd4f147
        rightAlerts:
          type: boolean
          description: whether the alerts was right or not
          example: false
        failureModeId:
          type: string
          example: 6458asd489786asd
        falsesFailuresIds:
          type: array
          items:
            type: string
            example: 6458asd489786asd
        severityId:
          type: string
          example: 6458asd489786asd
        dateRange:
          type: object
          $ref: "#/components/schemas/common.DateRange"
        description:
          type: string
        recommendation:
          type: string
    feedback.FeedbackResponse:
      type: object
      properties:
        id:
          type: string
          example: 615865149841asd8846
        assetId:
          type: string
          description: asset ID
          example: 615865149841asd8846
        projectId:
          type: string
          description: project ID
          example: 615865149841asd8846
        alertData:
          type: object
          properties:
            alertsId:
              type: array
              items:
                type: string
                example: 615sad8fg56780
            rightAlerts:
              type: boolean
        failureModeId:
          type: string
          description: failure mode ID
          example: 615865149841asd8846
        falseFailuresIds:
          type: array
          items:
            type: string
            example: 615sad8fg56780
        severityId:
          type: string
          description: severity ID
          example: 615865149841asd8846
        dynamicProperties:
          type: array
          items:
            type: string
            example: M1H__1KhZ
        description:
          type: string
        recommendation:
          type: string
        dateRange:
          type: object
          $ref: "#/components/schemas/common.DateRange"
        attachmentsIds:
          type: array
          items:
            type: string
            example: 615865149841asd8846
    machine-learning.Model:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Model ID
              example: 60f59b87e0498896dcf85451
            projectId:
              type: string
              description: ID of the project to which the model belongs
              example: 60f59b87e0498896dcf85451
            assetId:
              type: string
              description: ID of the asset to which the model belongs
              example: 60f59b87e0498896dcf85451
            type:
              type: string
              enum:
                - ANOMALY DETECTION
              description: The type of model
              example: ANOMALY DETECTION
            name:
              type: string
              description: The name of the model implementation
              example: Model demo1
            description:
              type: string
              nullable: true
              description: A description for the model implementation
              example: Model for testing
            draft:
              $ref: "#/components/schemas/machine-learning.ModelDraft"
            status:
              type: string
              enum:
                - RUNNING
                - STOPPED
                - DELETED
              description: The status of the model implementation
              example: RUNNING
            statisticalAnalysisPath:
              type: string
              description: path to statistical analysis PDF in GCS
              example: monomizer-dev-resources/projects/test-project-01/models/test-model-01/statistical-analysis.pdf
            timeAggregation:
              $ref: "#/components/schemas/machine-learning.TimeAggregation"
            trainingDate:
              type: string
              format: date-time
              description: the last training date for the published model
              example: 2022-01-23T18:47:17.818Z
            lastTrainingDate:
              type: string
              format: date-time
              description: the effective last training date. If there is a trained draft, this
                field will be the draft trainingdate. Otherwise, if the model is
                publidhed, this field will be the published model traininf date.
                Otherwise this field will be empty.
              example: 2022-01-23T18:47:17.818Z
            inferenceEndpoint:
              type: string
              description: the endpoint to execute the inference with the model
              example: http://...
            publicationDate:
              type: string
              format: date-time
              description: the last publication date
              example: 2022-01-23T18:47:17.818Z
            deletionDate:
              type: string
              format: date-time
              description: the deletion date
              example: 2022-01-23T18:47:17.818Z
        - $ref: "#/components/schemas/property.PropertiesFilters"
        - $ref: "#/components/schemas/machine-learning.PublishRequest"
    machine-learning.ModelDraft:
      description: Draft for a model
      allOf:
        - $ref: "#/components/schemas/property.PropertiesFilters"
        - type: object
          properties:
            wizardStep:
              type: integer
              format: int32
              default: 1
              description: Indicates the step in the draft configuration process that the user
                was in. Must be a value between 1 and 4
              example: 1
            errorInfo:
              $ref: "#/components/schemas/machine-learning.ErrorInfo"
            description:
              type: string
              nullable: true
              description: A description for the model implementation
              example: Draft model for testing
            skipRemovePropertyAdvice:
              type: boolean
              description: Indicates whether to skip the confirmation message when deleting a
                property from the trend graph
            status:
              type: string
              enum:
                - DRAFT
                - ANALYZING
                - TRAINING
                - PUBLISHING
              description: The current status of the draft
              example: TRAINING
            statisticalAnalysisPath:
              type: string
              description: path to statistical analysis PDF in GCS
              example: monomizer-dev-resources/projects/test-project-01/models/test-model-01/statistical-analysis.pdf
            timeAggregation:
              $ref: "#/components/schemas/machine-learning.TimeAggregation"
            trainingDate:
              type: string
              format: date-time
              description: the last training date of the draft model
              example: 2022-01-23T18:47:17.818Z
            inferenceEndpoint:
              type: string
              description: the endpoint to execute the inference with the model
              example: http://...
    machine-learning.TimeAggregation:
      description: Time aggregation data
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        autocalculated:
          type: boolean
          default: true
        value:
          type: integer
          format: int32
          description: Time aggregation value
          example: 60
        unit:
          type: string
          enum:
            - m
            - h
            - d
          description: |
            Unit of time in which the value is expressed:
             * `m` - Minutes
             * `h` - Hours
             * `d` - Days
          example: m
    machine-learning.PublishRequest:
      type: object
      required:
        - outputPropertyName
      properties:
        outputPropertyName:
          type: string
          description: The name of the model output property
          example: ABCD model
        alarm:
          type: object
          properties:
            create:
              type: boolean
              description: Indicates whether an alarm associated with the output property
                should be created.
            severity:
              type: string
              enum:
                - low
                - medium
                - high
                - critical
              description: the severity for the new alarm. Mandatory if 'createAlarm' is true
              example: high
            label:
              type: string
              description: The label to record the alarm
              example: Anomaly in model X
        inferenceFrequency:
          $ref: "#/components/schemas/common.TimeMetric"
    machine-learning.ModelsPagination:
      allOf:
        - type: object
          properties:
            models:
              type: array
              items:
                $ref: "#/components/schemas/machine-learning.Model"
        - $ref: "#/components/schemas/common.Pagination"
    machine-learning.CreateRequest:
      type: object
      required:
        - type
        - name
      properties:
        type:
          type: string
          enum:
            - ANOMALY DETECTION
          description: The type of model
          example: ANOMALY DETECTION
        name:
          type: string
          description: The name of the model implementation
          example: Model demo1
        description:
          type: string
          nullable: true
          description: A description for the model implementation
          example: Model for testing
    machine-learning.UpdateRequest:
      allOf:
        - type: object
          properties:
            wizardStep:
              type: integer
              format: int32
              default: 1
              description: Indicates the step in the draft configuration process that the user
                was in. Must be a value between 1 and 4
              example: 1
            errorInfo:
              $ref: "#/components/schemas/machine-learning.ErrorInfo"
            description:
              type: string
              nullable: true
              description: A description for the model implementation
              example: Model for testing
            skipRemovePropertyAdvice:
              type: boolean
              description: Indicates whether to skip the confirmation message when deleting a
                property from the trend graph
            timeAggregation:
              $ref: "#/components/schemas/machine-learning.TimeAggregation"
            inferenceEndpoint:
              type: string
              description: the endpoint to execute the inference with the model
              example: http://...
            inferenceFrequency:
              $ref: "#/components/schemas/common.TimeMetric"
        - $ref: "#/components/schemas/property.PropertiesFilters"
    machine-learning.ErrorInfo:
      description: contains the last error information, if any
      type: object
      properties:
        message:
          type: string
          description: Contains information about the last error occurred when setting up
            the draft
          example: "An error occurred while generating the statistical analysis: code 666"
        status:
          type: string
          enum:
            - DRAFT
            - ANALYZING
            - TRAINING
            - PUBLISHING
          description: The state the draft was in when the error occurred.
          example: TRAINING
    master-data.NameDescription:
      type: object
      properties:
        id:
          type: string
          example: 60c8c0fd8e26500ee3792d75
        name:
          type: string
          example: Name
        description:
          type: string
          example: Description
    master-data.Magnitude:
      allOf:
        - $ref: "#/components/schemas/master-data.NameDescription"
    master-data.Unit:
      allOf:
        - $ref: "#/components/schemas/master-data.NameDescription"
        - type: object
          properties:
            magnitude:
              $ref: "#/components/schemas/master-data.Magnitude"
            symbol:
              type: string
              example: km/h
    master-data.Severity:
      type: object
      properties:
        id:
          type: string
          example: 60c8c0fd8e26500ee3792d75
        name:
          type: string
          example: High
        value:
          type: integer
          example: 60
        hexColor:
          type: string
          example: "#FFE81C"
    master-data.Process:
      allOf:
        - $ref: "#/components/schemas/master-data.NameDescription"
    master-data.FailureMode:
      allOf:
        - $ref: "#/components/schemas/master-data.NameDescription"
    master-data.AssetType:
      allOf:
        - $ref: "#/components/schemas/master-data.NameDescription"
        - type: object
          properties:
            iconUrl:
              type: string
              description: The public URI to access the icon file. This field is mandatory
              example: https://storage.googleapis.com/monomizer-dev-resources/images/assets/plant.svg
    notification.Notifications:
      type: array
      items:
        $ref: "#/components/schemas/notification.Notification"
    notification.Notification:
      type: object
      properties:
        notificationId:
          type: string
          example: u7h7891779y79y
        receiver:
          type: string
          example: 178uy89jhybn758
        projectId:
          type: string
          example: 10l18jmz18
        content:
          type: string
          example: <div><p>Notification</p></html>
        isRead:
          type: boolean
          example: false
    notification.UserNotificationConfig:
      type: object
      properties:
        enabledGlobal:
          type: boolean
          description: Check to globally enable/disable all notifications for a user
          nullable: true
        language:
          type: string
          description: language to build notifications
          example: es
          nullable: true
        globalChannelsConfig:
          type: array
          items:
            type: object
            properties:
              channel:
                type: string
                example: mobile
              enabled:
                type: boolean
              severityId:
                type: string
                example: 60c8c0fd8e26500ee3792d75
                nullable: false
        exceptions:
          type: array
          items:
            type: object
            properties:
              assetId:
                type: string
                example: 60c8c0fd8e26500ee3792d75
              channels:
                type: array
                items:
                  type: object
                  properties:
                    channel:
                      type: string
                      example: mobile
                    severityId:
                      type: string
                      example: 60c8c0fd8e26500ee3792d75
                      nullable: false
                    enabled:
                      type: boolean
    notification.PushDevice:
      type: object
      properties:
        token:
          type: string
          description: Token of push notification provider
        channel:
          type: string
          description: type of device to register
          example: mobile
    templates.PaginatedTemplates:
      allOf:
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/templates.Template"
        - $ref: "#/components/schemas/common.Pagination"
    templates.Template:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Kinematic template ID
              example: 60f59b87e0498896dcf85451
            name:
              type: string
              description: The name of the kinematic template
              example: Template-01
            editingBy:
              type: string
              description: The email of the user who is currently editing the template
              example: test@monom.ai
            publicationDate:
              type: string
              format: date-time
              description: The date the template was published
              example: 2022-01-23T18:47:17.818Z
            inactivationDate:
              type: string
              format: date-time
              description: The date on which the template became inactive (a newer version was
                published)
              example: 2022-01-23T18:47:17.818Z
            deletionDate:
              type: string
              format: date-time
              description: The date on which the template was deleted
              example: 2022-01-23T18:47:17.818Z
            draft:
              $ref: "#/components/schemas/templates.TemplateData"
        - $ref: "#/components/schemas/templates.TemplateData"
    templates.TemplateData:
      type: object
      properties:
        generalInformation:
          $ref: "#/components/schemas/templates.GeneralInformation"
        processingTree:
          $ref: "#/components/schemas/templates.ProcessingTree"
        operationStatus:
          $ref: "#/components/schemas/templates.OperationStatus"
        defaultAlarmConfiguration:
          $ref: "#/components/schemas/templates.DefaultAlarmConfiguration"
        components:
          $ref: "#/components/schemas/templates.Components"
    templates.GeneralInformation:
      type: object
      properties:
        nominalSpeed:
          type: number
          format: float
          description: Nominal speed
        tachometerId:
          type: string
          description: ID of the tachometer item in the catalog
          example: 60f59b87e0498896dcf85451
    templates.ProcessingTree:
      type: object
      properties:
        sensors:
          type: array
          items:
            $ref: "#/components/schemas/templates.Sensor"
    templates.Sensor:
      type: object
      properties:
        name:
          type: string
          description: The name of the sensor. Must be unique throughout Monom Platform!
          example: Sensor-01
        measures:
          type: array
          items:
            $ref: "#/components/schemas/templates.Measure"
    templates.Measure:
      type: object
      properties:
        name:
          type: string
          description: The name of the measure. Must be unique in the containing sensor
          example: Measure-01
        processings:
          type: array
          items:
            $ref: "#/components/schemas/templates.Processing"
    templates.Processing:
      type: object
      properties:
        name:
          type: string
          description: The name of the processing
          example: Processing-01
        processings:
          type: array
          items:
            $ref: "#/components/schemas/templates.Processing"
    templates.OperationStatus:
      type: array
      items:
        $ref: "#/components/schemas/templates.Operation"
    templates.Operation:
      type: object
      properties:
        name:
          type: string
          description: The name of the operation. Must be unique in the containing template
          example: Operation-01
        formula:
          type: string
          description: The formula to execute in the operation.
          example: XYZ+.455
    templates.DefaultAlarmConfiguration:
      type: array
      items:
        $ref: "#/components/schemas/templates.Alarm"
    templates.Alarm:
      type: object
      properties:
        staticAlarm:
          type: boolean
        severityId:
          type: string
          description: severity ID
          example: 615865149841asd8846
        baseLine:
          type: integer
          format: int32
          description: The base line expressed in percentage
          example: 100
        standardDeviation:
          type: integer
          format: int32
          description: The standard deviation expressed in percentage
          example: 4
        constantK:
          type: integer
          format: int32
          description: The conatsnt K value
          example: 0
    templates.Components:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/templates.GenericComponent"
          - $ref: "#/components/schemas/templates.GearboxComponent"
    templates.Component:
      type: object
      properties:
        typeId:
          type: string
          description: Component type  ID
          example: 60f59b87e0498896dcf85451
        name:
          type: string
          description: The name of the component. Must be unique in the containing template.
          example: Component-01
    templates.GenericComponent:
      allOf:
        - $ref: "#/components/schemas/templates.Component"
        - type: object
          properties:
            manufacturer:
              type: string
              description: the manufacturer name. Probably in the future it will be the ID of
                a catalog element
              example: Manufacturer-01
            model:
              type: string
              description: the model name. Probably in the future it will be the ID of a
                catalog element
              example: Model-01
            bearings:
              type: array
              items:
                $ref: "#/components/schemas/templates.Bearing"
    templates.Bearing:
      type: object
      properties:
        manufacturer:
          type: string
          description: the manufacturer name. Probably in the future it will be the ID of
            a catalog element
          example: Manufacturer-01
        model:
          type: string
          description: the model name. Probably in the future it will be the ID of a
            catalog element
          example: Model-01
        side:
          type: string
          description: the side acronym. At most 4 characters
          example: LOA
    templates.GearboxComponent:
      allOf:
        - $ref: "#/components/schemas/templates.Component"
        - type: object
          properties:
            elements:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/templates.Spur"
                  - $ref: "#/components/schemas/templates.Planetary"
    templates.Spur:
      type: object
      required:
        - teethPinionShaft
        - teethGearShaft
      properties:
        teethPinionShaft:
          type: integer
          format: int32
        teethGearShaft:
          type: integer
          format: int32
    templates.Planetary:
      type: object
      required:
        - teethSunGear
        - teethPlanetPinions
        - teethRingGear
        - numberOfPlanets
      properties:
        teethSunGear:
          type: integer
          format: int32
        teethPlanetPinions:
          type: integer
          format: int32
        teethRingGear:
          type: integer
          format: int32
        numberOfPlanets:
          type: integer
          format: int32
    templates.GearboxElement:
      type: object
      properties:
        teethPinionShaft:
          type: integer
          format: int32
        teethGearShaft:
          type: integer
          format: int32
        teethSunGear:
          type: integer
          format: int32
        teethPlanetPinions:
          type: integer
          format: int32
        teethRingGear:
          type: integer
          format: int32
        numberOfPlanets:
          type: integer
          format: int32
    property.AlertRecognition:
      type: object
      properties:
        date:
          type: string
          example: 2020-01-24T15:00:22.222
        user:
          type: string
          example: uytii67ti6it76r7
        severity:
          $ref: "#/components/schemas/property.AlertSeverity"
    property.AlertSeverity:
      type: object
      properties:
        id:
          type: string
          example: uytii67ti6it76r7
        name:
          type: string
          example: Critical
        value:
          type: number
          example: 50
        hexColor:
          type: string
          example: FFAA11
    property.PropertyValue:
      type: object
      properties:
        date:
          type: string
          example: 2022-10-04T17:44:49.364Z
        unit:
          type: string
          description: Localized name of the unit
          example: Temperature
        value:
          type: number
          example: 50.34
    property.SeverityTransition:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: 2022-10-04T17:44:49.364Z
        severity:
          $ref: "#/components/schemas/master-data.Severity"
    property.PropertyTrend:
      allOf:
        - $ref: "#/components/schemas/property.PropertyValue"
        - type: object
          properties:
            minValue:
              type: number
              example: 1.2
            maxValue:
              type: number
              example: 1.8
    property.PropertyGauge:
      allOf:
        - $ref: "#/components/schemas/property.PropertyValue"
        - type: object
          properties:
            severity:
              $ref: "#/components/schemas/master-data.Severity"
    property.PropertiesFilters:
      type: object
      properties:
        properties:
          type: array
          items:
            type: string
          description: list of properties selected for training the model
          example:
            - property1
            - property2
            - property3
        timeRange:
          $ref: "#/components/schemas/common.TimeRange"
    property.PropertiesData:
      description: Data for properties in time range grouped by bucket
      allOf:
        - $ref: "#/components/schemas/property.PropertiesFilters"
        - type: object
          properties:
            bucket:
              $ref: "#/components/schemas/common.TimeMetric"
            data:
              type: array
              items:
                type: object
                properties:
                  bucket:
                    type: string
                    description: Bucket name
                    example: 2022-04-29
                  total:
                    type: integer
                    description: Number of data
                    example: 42
    property.AlarmsData:
      description: Alarms data for properties in time range grouped by bucket
      allOf:
        - $ref: "#/components/schemas/property.PropertiesFilters"
        - type: object
          properties:
            bucket:
              $ref: "#/components/schemas/common.TimeMetric"
            data:
              type: array
              items:
                $ref: "#/components/schemas/property.AlarmDataInBucket"
    property.AlarmDataInBucket:
      description: The bucket data for alarms
      type: object
      properties:
        bucketInterval:
          $ref: "#/components/schemas/common.TimeRange"
        severity:
          type: string
          enum:
            - low
            - medium
            - high
            - critical
          description: Bucket severity (greater of alarms severity). Empty ('Unknown') if
            there are no alarms configured for that asset and those properties
            in the indicated period.
          example: high
        alarms:
          description: Alarms data
          type: array
          items:
            $ref: "#/components/schemas/property.AlarmData"
    property.AlarmData:
      description: Alarm data for properties in a time bucket
      type: object
      properties:
        property:
          type: string
          description: Property name
          example: Property 3
        alarmInterval:
          $ref: "#/components/schemas/common.TimeRange"
        maxSeverity:
          type: string
          enum:
            - low
            - medium
            - high
            - critical
          description: The maximum severity reached by the property
          example: high
    machine-learning.BucketCalculation:
      description: The reult of the bucket calculation. It includes both the size and
        the number of buckets
      type: object
      properties:
        numBuckets:
          type: integer
          format: int32
          description: the number of bucjets for the time range
          example: 30
        bucketSizeInSeconds:
          type: integer
          format: int32
          description: the size of the bucket expressed in seconds
          example: 3600
        bucketValue:
          type: integer
          format: int32
          description: the size of the bucket expressed in the unit of time that fits best
          example: 1
        bucketUnit:
          type: string
          enum:
            - ms
            - s
            - m
            - h
            - d
            - week
            - month
            - year
          description: |
            Unit of time in which the bucket value is expressed:
             * `ms` - Milliseconds
             * `s` - Seconds
             * `m` - Minutes
             * `h` - Hours
             * `d` - Days
             * `week` - Weeks
             * `month` - Months
             * `year` - Years
          example: h
paths:
  "/app/projects/{projectId}/assets/{id}":
    get:
      tags:
        - Asset
      summary: Retrieves an Asset
      parameters:
        - name: id
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
          example: q78yh78-89hih-897h897
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: Asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.Asset"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    patch:
      tags:
        - Asset
      summary: Update Partially an asset
      parameters:
        - name: id
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          schema:
            type: string
          required: true
          description: Project ID
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset.AssetPatch"
      responses:
        "200":
          description: Asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.Asset"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    put:
      summary: Update
      tags:
        - Asset
      parameters:
        - name: id
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset.BaseAsset"
      responses:
        "200":
          description: Asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.Asset"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets":
    get:
      tags:
        - Asset
      summary: Retrieves list
      parameters:
        - name: page
          in: query
          description: Number page
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Limit of items per page
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: names
          in: query
          required: false
          description: Name filter
          schema:
            type: array
            items:
              type: string
              example: Motor
        - name: types
          in: query
          required: false
          description: Type filter
          schema:
            type: array
            items:
              type: string
              example: Sensor
        - name: tags
          in: query
          required: false
          description: Tags filter
          schema:
            type: array
            items:
              type: string
              example: Small
        - name: files
          in: query
          required: false
          description: Files filter
          schema:
            type: boolean
            example: false
        - name: properties
          description: Have properties filter
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: dynamic-properties
          description: Have dynamic properties filter
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: M1A_1kHz,S2V_iPeak
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: q
          in: query
          required: false
          description: Free text to search for in Asset name
          schema:
            type: string
            example: MyAsset
        - name: sort
          in: query
          required: false
          description: Optional sort criteria
          schema:
            type: string
            example: name:asc
      responses:
        "200":
          description: Asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.AssetPagination"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      summary: Create
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset.BaseAsset"
      responses:
        "201":
          description: Asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.Asset"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Asset
      summary: Delete a list of Assets
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        description: List of Asset ids to be deleted
        content:
          application/json:
            schema:
              type: array
              example:
                - 67t67tydf34d5
                - 6f65gjhg6
              items:
                type: string
      responses:
        "204":
          description: Delete Asset
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/count":
    get:
      tags:
        - Asset
      summary: Count Assets by project
      description: Returns the number of assets related to the project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: The number of assets related to project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.CountResult"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/names":
    get:
      summary: Get project asset names
      description: List assets names returning the id and name, without pagination
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: monom-dev
      responses:
        "200":
          description: Asset names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    assetId:
                      type: string
                    assetName:
                      type: string
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/resources":
    post:
      summary: Create asset resources
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                fileName:
                  type: string
                  format: binary
      responses:
        "201":
          description: Resource created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.AssetResource"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/resources/{resourceId}":
    delete:
      summary: Delete resource
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          example: monom-dev
          schema:
            type: string
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          description: Resource Id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete asset resource
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    get:
      summary: Get Resource
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          description: Resource Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Resource Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.AssetResource"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/resources/{resourceId}/{resourceFileName}":
    get:
      summary: Retrieves resource file
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          description: Resource Id
          required: true
          schema:
            type: string
        - name: resourceFileName
          in: path
          description: Resource File Name, including extension
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Resource Content
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/dynamic-properties":
    get:
      summary: Get asset dynamic properties
      description: List asset properties involved in the published Data Flow
      tags:
        - Asset
        - Flow
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 789a789hh780h78h8
        - name: type
          in: query
          description: Type of property
          example: SCALAR
          required: false
          style: form
          schema:
            type: string
      responses:
        "200":
          description: Asset dynamic properties names
          content:
            application/json:
              schema:
                type: array
                example:
                  - Temperature
                  - Pressure
                items:
                  type: string
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/dynamic-properties":
    get:
      summary: Get project assets dynamic properties
      tags:
        - Asset
        - Flow
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetIds
          in: query
          description: Ids of assets
          required: false
          schema:
            type: array
            example:
              - 62bec7181290f36bf1ca66c6
              - 629df7eeca37bc00a951f82b
              - 62b55c7fdbc094736b06e075
            items:
              type: string
        - name: type
          in: query
          description: Type of property
          example: SCALAR
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Project Assets dynamic properties names
          content:
            application/json:
              schema:
                type: array
                example:
                  - Temperature
                  - Pressure
                items:
                  type: string
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/tags":
    get:
      summary: Get Tags
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: Asset available tags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.Tags"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/attributes":
    get:
      summary: Get Attributes
      tags:
        - Asset
        - Attribute
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: Asset attribute names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets-tree":
    get:
      summary: Retrieve asset on tree view
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: q
          in: query
          required: false
          description: Free text to search for in Asset name
          schema:
            type: string
            example: moto
        - name: names
          in: query
          required: false
          description: Name filter
          schema:
            type: array
            items:
              type: string
              example: Motor
        - name: types
          in: query
          required: false
          description: Type filter
          schema:
            type: array
            items:
              type: string
              example: Sensor
        - name: tags
          in: query
          required: false
          description: Tags filter
          schema:
            type: array
            items:
              type: string
              example: Small
        - name: files
          in: query
          required: false
          description: have files filter
          schema:
            type: boolean
            example: false
        - name: dynamic-properties
          description: Dynamic properties filter
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: M1A_1kHz,S2V_iPeak
        - name: maxDepth
          in: query
          required: false
          description: Max depth of descendants to retrieve
          schema:
            type: integer
          example: 0
      responses:
        "200":
          description: Asset Tree
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/asset.AssetTreeNodeWithDescendants"
                  search:
                    type: object
                    properties:
                      matched:
                        type: array
                        items:
                          type: string
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets-tree/descendants":
    get:
      summary: Retrieve asset tree descendants
      tags:
        - Asset
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: parentId
          in: query
          required: false
          description: Parent ID
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "200":
          description: Asset Tree with descendants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset.AssetTreeNode"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/threshold-alarms/{alarmId}":
    get:
      tags:
        - Alarm
      summary: Retrieves a Threshold Alarm
      parameters:
        - name: alarmId
          in: path
          description: Alarm Id
          required: true
          schema:
            type: string
          example: q78yh78-89hih-897h897
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Threshold Alarm information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.ThresholdAlarm"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    put:
      tags:
        - Alarm
      summary: Updates a Threshold Alarm
      parameters:
        - name: alarmId
          in: path
          description: Alarm Id
          required: true
          schema:
            type: string
          example: q78yh78-89hih-897h897
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset.ThresholdAlarm"
      responses:
        "200":
          description: Threshold Alarm information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.ThresholdAlarm"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/threshold-alarms":
    post:
      summary: Creates an Asset Alarm of type THRESHOLD
      tags:
        - Alarm
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset.ThresholdAlarm"
      responses:
        "200":
          description: Threshold alarm created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.ThresholdAlarm"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    get:
      summary: Filtered search of Threshold Alarms
      description: >-
        List all threshold alarms, or only those that match the specified
        query.  


        Contains a list of severities with their thresholds. The severity will have a range based on the "min" and "max" fields:
         * if both are present, it will be applied to the interval;
         * if only "min" is reported, it will be applied to values greater than this threshold;
         * if only "max" is reported, it will be applied to values less than this threshold.
      tags:
        - Alarm
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: asset-ids
          in: query
          required: false
          description: Asset id filter
          schema:
            type: array
            items:
              type: string
              example: 88888222661562166afd4f147
        - name: attribute-names
          in: query
          required: false
          description: Alarm property name filter
          schema:
            type: array
            items:
              type: string
              example: Temperature
        - name: q
          in: query
          required: false
          description: Free text case-insensitive to search for in Asset name, Alert name
            or Asset attribute name
          schema:
            type: string
            example: MyAsset
        - name: sort
          in: query
          required: false
          description: Optional sort criteria
          schema:
            type: string
            example: name:asc
        - name: page
          in: query
          description: Search results page number. Use this parameter to loop through the
            results.The first page is 1
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Limit of items per page. The maximum number of items returned per
            page is 20 even if you specify a higher limit.
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Threshold Alarms page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.ThresholdAlarmPagination"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/alarms":
    delete:
      tags:
        - Alarm
      summary: Delete a list of Alarms
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        description: List of Alarm ids to be deleted
        content:
          application/json:
            schema:
              type: array
              example:
                - g64324f787gb78
                - 7gb4df53df67g6
              items:
                type: string
      responses:
        "204":
          description: Delete Alarm
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/threshold-alerts":
    get:
      tags:
        - Alert
      summary: Filtered Threshold Alerts
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: asset-types
          in: query
          required: false
          description: Asset types filter
          schema:
            type: array
            items:
              type: string
        - name: asset-names
          in: query
          required: false
          description: Asset name filter
          schema:
            type: array
            items:
              type: string
        - name: asset-properties
          in: query
          required: false
          description: Asset properties filter
          schema:
            type: array
            items:
              type: string
        - name: recognition
          in: query
          required: false
          description: Recognition filter
          schema:
            type: boolean
            example: false
        - name: status
          in: query
          required: false
          description: alert status filter
          schema:
            type: boolean
            example: false
        - name: severity
          in: query
          required: false
          description: severity level filter
          schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
              - 4
        - name: start-date
          in: query
          required: true
          description: Epoch millis of start date filter.
          schema:
            type: number
            example: 1630925346000
        - name: end-date
          in: query
          required: true
          description: Epoch millis of end date filter.
          schema:
            type: number
            example: 1733517346000
        - name: q
          in: query
          required: false
          description: Free text to search for in Asset name, Alarm name or severity name
          schema:
            type: string
            example: MyAsset
        - name: sort
          in: query
          required: false
          description: Optional sort criteria
          schema:
            type: string
            example: alertName:asc
      responses:
        "200":
          description: Alert page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset.ThresholdAlertPagination"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/threshold-alerts/acknowledge":
    patch:
      tags:
        - Alert
      summary: Updates Threshold alerts
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset.ThresholdAlertAcknowledges"
      responses:
        "204":
          description: Update Threshold Alert Information
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/mobile/projects/{projectId}/assets-tree":
    get:
      summary: Paginated asset search
      description: It allows to obtain the asset tree and filter the results by
        "asset", "types", "tags", "dynamic properties" or if it has associated
        files. Returns paginated results and includes information on
        unacknowledged alerts.
      tags:
        - Asset mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451d
        - name: parentId
          in: query
          required: false
          description: Parent Id of the asset to return his childs.
          schema:
            type: string
          example: 60f59b87e0498896dcf85451d
        - name: types
          in: query
          required: false
          description: Type filter. Multivalued
          schema:
            type: array
            items:
              type: string
              example: 60f59b87e0498896dcf85451d
        - name: query
          in: query
          required: false
          description: Field to search. Right now ony search in field asset-name
          schema:
            type: string
            example: Motor1
        - name: assets
          in: query
          required: false
          description: Asset filter. Multivalued
          schema:
            type: array
            items:
              type: string
              example: 60f59b87e0498896dcf85451d
        - name: dynamic-properties
          description: Dynamic properties filter. Multivalued
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: M1A_1kHz,S2V_iPeak
        - name: include-unacknowledged-alerts
          in: query
          required: false
          description: Indicates whether information on unacknowledged alerts should be
            included in each result
          schema:
            type: boolean
            default: true
            example: false
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          description: Number of results per page
          example: 20
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          description: Results page you want to retrieve
          example: 1
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Asset Tree
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mobile.PaginatedAssetTree"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/mobile/projects/{projectId}/assets/{assetId}":
    get:
      summary: Get basic asset data
      description: "Returns the basic asset data: asset icon, type, name, id and
        number of children by type."
      tags:
        - Asset mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451d
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451d
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: The basic asset data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mobile.BasicAsset"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/mobile/projects/{projectId}/assets/{assetId}/alerts-count":
    get:
      summary: Count alerts by severity
      description: Returns a map with the number of alerts of this asset by severity
      tags:
        - Asset mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Alerts count by severity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mobile.AlertsBySeverity"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/mobile/projects/{projectId}/assets/alerts":
    get:
      summary: Filtered alert search
      description: Returns a list of alerts, filtering the results. The results are
        paginated.
      tags:
        - Asset mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: query
          in: query
          required: false
          description: Asset or alarm name filter (Search box)
          schema:
            type: string
            example: Motor
        - name: assets
          in: query
          required: false
          description: Asset Id filter. Multivalued
          schema:
            type: array
            items:
              type: string
            example:
              - 056548-145415,065418-631574
        - name: asset-types
          in: query
          required: false
          description: Asset types Id filter. Multivalued
          schema:
            type: array
            items:
              type: string
            example:
              - 056548-145415
        - name: start-date
          in: query
          required: true
          description: ISO start date filter.
          schema:
            type: string
            format: date
            example: 2022-01-01T08:30:00Z
        - name: end-date
          in: query
          required: true
          description: ISO end date filter.
          schema:
            type: string
            format: date
            example: 2022-01-01T08:30:00Z
        - name: dynamic-properties
          description: Dynamic properties filter. Multivalued
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: M1A_1kHz,S2V_iPeak
        - name: acknowledged
          in: query
          required: false
          description: Acknowledgment filter
          schema:
            type: boolean
            example: false
        - name: active
          in: query
          required: false
          description: Alert active filter. To search for active alerts set it to true.
          schema:
            type: boolean
            example: false
        - name: severities
          in: query
          required: false
          description: Severity Id level filter. Multivalued
          schema:
            type: array
            items:
              type: string
            example:
              - 056548-145415
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          description: Number of results per page
          example: 20
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          description: Results page you want to retrieve
          example: 1
      responses:
        "200":
          description: Alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/mobile.PaginatedAlerts"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/mobile/projects/{projectId}/assets/alerts/{alertId}":
    get:
      summary: Get alert data
      description: "Returns alert data: seveirty, status, period, alarm, asset, etc."
      tags:
        - Asset mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451d
        - name: alertId
          in: path
          required: true
          description: Alert ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451d
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: The alert data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mobile.AlertResult"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/users:
    get:
      tags:
        - User
      summary: Retrieves user information
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.User"
        default:
          description: Error message
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.MonomError"
  /app/projects:
    get:
      tags:
        - User
        - Project
      summary: Retrieves logged user active projects
      responses:
        "200":
          description: User active projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.Project"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/scopes":
    get:
      tags:
        - User
        - Scope
      summary: Retrieves list of project scopes
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: User scopes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: user.readonly
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/roles":
    get:
      tags:
        - User
        - Role
      summary: Retrieves list of project roles
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: Role information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.Role"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/users":
    get:
      tags:
        - User
      summary: Retrieves list of project users
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: q
          in: query
          required: false
          description: Optional text to filter groups containing value in fullName or email
          schema:
            type: string
          example: john
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.User"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      tags:
        - User
      summary: Register new user on project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.CreateUser"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.User"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/users/{userId}":
    put:
      tags:
        - User
      summary: Edit user information
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.ModifyUser"
      responses:
        "200":
          description: User modified
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.User"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - User
      summary: Delete an user from a project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        "204":
          description: User Deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/users/groups":
    post:
      tags:
        - User
        - Role
      summary: Assign a group to an user
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.CreateUserGroup"
      responses:
        "201":
          description: Group User relation created
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/users/roles":
    post:
      tags:
        - User
        - Role
      summary: Assign a role to an user
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.CreateUserRole"
      responses:
        "201":
          description: Role User relation created
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/users/{userId}/roles/{roleId}":
    delete:
      tags:
        - User
        - Role
      summary: Delete a role from an user
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          description: Role ID
          schema:
            type: string
      responses:
        "204":
          description: Role Deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/groups":
    get:
      tags:
        - User
        - Group
      summary: Retrieves list of project groups
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: q
          in: query
          required: false
          description: Optional text to filter groups containing value in name
          schema:
            type: string
          example: admin
      responses:
        "200":
          description: Project user groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.GroupWithTotalUsersAndRoles"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      tags:
        - User
        - Group
      summary: Register new group on project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.EditGroup"
      responses:
        "201":
          description: Group created
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.Group"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/groups/{groupId}":
    put:
      tags:
        - User
        - Group
      summary: Modify group on project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.EditGroup"
      responses:
        "200":
          description: Group modified
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.Group"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - User
        - Group
      summary: Delete group from project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "204":
          description: Group removed
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/groups/{groupId}/users/{userId}":
    delete:
      tags:
        - User
        - Group
      summary: Unassign user from group belongs to project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "204":
          description: User unassigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/groups/{groupId}/roles/{roleId}":
    post:
      tags:
        - User
        - Group
        - Role
      summary: Assign role to group
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: roleId
          in: path
          required: true
          description: Role ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "201":
          description: Role assigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - User
        - Group
        - Role
      summary: Unassign role from group
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: roleId
          in: path
          required: true
          description: Role ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "204":
          description: Role unassigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/projects":
    get:
      tags:
        - Organization
        - Project
      summary: Retrieves list of organization projects
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "200":
          description: Organization projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.Project"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/users":
    get:
      tags:
        - Organization
        - User
      summary: Retrieves list of organization users
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.User"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      tags:
        - Organization
        - User
      summary: Register new user on organization
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.CreateUser"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.User"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/users/{userId}":
    delete:
      tags:
        - Organization
        - User
      summary: Delete an user from an organization
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        "204":
          description: User Deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/users/{userId}/projects/{projectId}":
    post:
      tags:
        - Organization
        - User
        - Project
      summary: Assign user to project
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "201":
          description: User Assigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Organization
        - User
        - Project
      summary: Unassign user from project
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "204":
          description: User Unassigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/groups":
    get:
      tags:
        - Organization
        - Group
      summary: Retrieves list of organization groups
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: q
          in: query
          required: false
          description: Optional text to filter groups containing value in name
          schema:
            type: string
          example: admin
      responses:
        "200":
          description: Organization groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/common.GroupWithTotalUsers"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      tags:
        - Organization
        - Group
      summary: Create new organization group
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.EditGroup"
      responses:
        "201":
          description: Group created
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.Group"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/groups/{groupId}":
    put:
      tags:
        - Organization
        - Group
      summary: Modify organization group information
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/common.EditGroup"
      responses:
        "200":
          description: Group modified
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/common.Group"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Organization
        - Group
      summary: Remove group from organization
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "204":
          description: Group removed
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/groups/{groupId}/projects/{projectId}":
    post:
      tags:
        - Organization
        - Group
        - Project
      summary: Assign group to project
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "201":
          description: Group assigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Organization
        - Group
        - Project
      summary: Unassign group from project
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "204":
          description: Group unassigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/organizations/{organizationId}/groups/{groupId}/users/{userId}":
    post:
      tags:
        - Organization
        - Group
        - User
      summary: Assign user to organization group
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "201":
          description: User assigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Organization
        - Group
        - User
      summary: Unassign user from organization group
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: groupId
          in: path
          required: true
          description: Group ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
        - name: userId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 89790-189hwj128-1w891jh09
      responses:
        "204":
          description: User unassigned
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/devices/{deviceId}/connectors":
    get:
      tags:
        - Connectors
      summary: Retrieves a list of available connectors.
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of the device
          example: 12156156-fads484fd78ad-4fds897g894af
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Connectors available types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/connectivity.ConnectorSchemaList"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/devices/{deviceId}/connectors/{connectorId}":
    get:
      tags:
        - Connectors
      summary: Retrieve connector schema configuration
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of the device
          example: 12156156-fads484fd78ad-4fds897g894af
          required: true
          style: simple
          schema:
            type: string
        - name: connectorId
          in: path
          description: ID of connector that needs to be fetched
          example: 12156156-fads484fd78ad-4fds897g894af
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: Connector schema configuration
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/connectivity.ConnectorSchema"
        "404":
          description: Connector not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/devices":
    get:
      tags:
        - Devices
      summary: Retrieve devices
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/connectivity.Device"
  "/app/projects/{projectId}/devices/{deviceId}/status":
    get:
      tags:
        - Devices
      summary: Retrive status from device
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.DeviceStatus"
  "/app/projects/{projectId}/devices/{deviceId}/modules":
    get:
      tags:
        - Devices
      summary: Returns device modules paginated
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: Device ID
          required: true
          style: simple
          schema:
            type: string
        - name: page
          in: query
          description: Number page
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Limit of items per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: q
          in: query
          required: false
          description: Free text to search for in Module name or type
          schema:
            type: string
            example: mod
        - name: type
          in: query
          required: false
          description: Filter by type
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: Optional sort criteria
          schema:
            type: string
            example: name:asc
      responses:
        "200":
          description: Modules page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.ModulePagination"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      tags:
        - Devices
      summary: Add a module to the device
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/connectivity.CreateModifyModule"
      responses:
        "201":
          description: Module added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.Module"
  "/app/projects/{projectId}/devices/{deviceId}/modules/{moduleId}":
    get:
      tags:
        - Devices
      summary: Returns the status of the device module
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: Device ID
          required: true
          schema:
            type: string
        - name: moduleId
          in: path
          description: Module ID
          required: true
          schema:
            type: string
            example: 12156156-fads484fd78ad-4fds897g894af
      responses:
        "200":
          description: Module details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.Module"
    delete:
      tags:
        - Devices
      summary: Delete module from a device
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          style: simple
          schema:
            type: string
        - name: moduleId
          in: path
          description: Module to delete by id
          required: true
          style: simple
          schema:
            type: string
      responses:
        "204":
          description: Deleted module
    put:
      tags:
        - Devices
      summary: Modify a device module
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          style: simple
          schema:
            type: string
        - name: moduleId
          in: path
          description: Module to delete by id
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/connectivity.CreateModifyModule"
      responses:
        "200":
          description: Module updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.Module"
  "/app/projects/{projectId}/devices/{deviceId}/modules/{moduleId}/status":
    get:
      tags:
        - Devices
      summary: Returns the status of the device module
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          schema:
            type: string
        - name: moduleId
          in: path
          description: Module ID
          required: true
          schema:
            type: string
            example: 12156156-fads484fd78ad-4fds897g894af
      responses:
        "200":
          description: Module status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.ModuleStatus"
  "/app/projects/{projectId}/devices/{deviceId}/modules/{moduleId}/feeds":
    get:
      tags:
        - Devices
      summary: Returns list of module feeds
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          schema:
            type: string
        - name: moduleId
          in: path
          required: true
          description: Module ID
          schema:
            type: string
            example: 12156156-fads484fd78ad-4fds897g894af
      responses:
        "200":
          description: Module feeds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectivity.FeedList"
  "/app/projects/{projectId}/devices/{deviceId}/configuration":
    put:
      tags:
        - Devices
      summary: Deploy current device configuration
      parameters:
        - name: projectId
          in: path
          description: Project ID
          example: monom-dev
          required: true
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of device that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        "202":
          description: Deployment processed
  "/app/projects/{projectId}/assets/{assetId}/dashboards":
    get:
      summary: Get asset dashboards
      description: Retrieves a list with all dashboards associated to an asset
      tags:
        - Dashboard
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dashboards information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dashboard.Dashboards"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/dashboards/{id}/default":
    put:
      tags:
        - Dashboard
      summary: Mark a dashboard as default
      description: Mark a dashboard as the default one for an asset
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Dashboard Id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Dashboard marked as default for user
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/mobile/projects/{projectId}/assets/{assetId}/dashboards":
    get:
      summary: Retrieve an user Dashboard Mobile for the asset
      description: Retrieve a Dashboard Mobile.
      tags:
        - Dashboard Mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 615865149841asd8846
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 615865149841asd8846
      responses:
        "200":
          description: Dashboard Mobile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mobile.DashboardResponse"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    put:
      summary: Save an user Dashboard Mobile for the asset
      description: Save a Dashboard Mobile with widgets configuration.
      tags:
        - Dashboard Mobile
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 615865149841asd8846
        - name: assetId
          in: path
          description: Asset Id
          required: true
          schema:
            type: string
      requestBody:
        description: Save Dashboard Mobile widgets configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mobile.DashboardRequest"
      responses:
        "200":
          description: Dashboard Mobile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mobile.DashboardResponse"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/data-flows/assets":
    get:
      tags:
        - Data Flow
      summary: Filter search for project assets
      description: Allows to filter the Assets of a project by type and name allowing
        to paginate and sort the results.
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: asset-types
          in: query
          required: false
          description: Comma separated list of assetTypesId
          example: id1,id2,id3
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: asset-name
          in: query
          required: false
          description: Name of Assets
          schema:
            type: string
          example: Gas turbine
        - name: limit
          in: query
          required: false
          schema:
            type: number
          example: 20
          description: Number of items per page
        - name: page
          in: query
          required: false
          schema:
            type: number
          example: 1
          description: Results page you want to retrieve
        - name: sort
          in: query
          required: false
          schema:
            type: string
          example: name:asc
          description: "Sorting criteria in the format: field:(asc|desc)"
      responses:
        "200":
          description: Paginated list of assets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-flow.AssetPagination"
  "/app/projects/{projectId}/data-flows/assets/count":
    get:
      tags:
        - Data Flow
      summary: Count of Assets with Data Flows published by project
      description: Count the Assets that have Data Flows in PUBLISH status for a given
        project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: The number of assets related to project with published data flows
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.CountResult"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/data-flow-set-previous":
    get:
      tags:
        - Data Flow
      summary: List of previous Data Flow Set publications
      description: Returns a list of all Data Flow Sets in 'INACTIVE' status, which
        have previously been published. Drafts are not included in the response
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: List of previous publications
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    dataFlowSetId:
                      type: string
                      example: 60f59b87e0498896dcf85451
                    flowCount:
                      type: number
                      example: 5
                    publishDateTime:
                      type: string
                      format: date-time
                      example: 2022-01-23T18:47:17.818Z
  "/app/projects/{projectId}/assets/{assetId}/data-flow-set":
    post:
      tags:
        - Data Flow
      summary: Create a Data Flow Set (Draft)
      description: Allows you to create a Data Flow Set for a project from a given one
        or from scratch (empty)
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              description: Previous Data Flow Set to generate a new draft
              nullable: true
              properties:
                dataFlowSetId:
                  type: string
                  nullable: true
                  example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: New version of Data Flows set in draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-flow.DataFlowSet"
  "/app/projects/{projectId}/assets/{assetId}/data-flow-set/{dataFlowSetId}":
    get:
      tags:
        - Data Flow
      summary: Retrieves a Data Flow Set by id
      description: Search for a Data Flow Set by id, assetId and projectId
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: dataFlowSetId
          in: path
          required: true
          description: Data Flow Set ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Data Flow Set from an Asset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-flow.DataFlowSet"
    put:
      tags:
        - Data Flow
      summary: Modify a Data Flow Set draft
      description: Allows to update the data of a Data Flow Set in draft status
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: dataFlowSetId
          in: path
          required: true
          description: Data Flow Set ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/data-flow.DataFlowSet"
      responses:
        "200":
          description: New version of Data Flows set in draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-flow.DataFlowSet"
    patch:
      tags:
        - Data Flow
      summary: Modify the state of draft Data Flow Set
      description: Allows to publish a Data Flow Set, validating beforehand that the
        defined flows are correct
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: dataFlowSetId
          in: path
          required: true
          description: Data Flow Set ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/data-flow.DataFlowSetPatch"
      responses:
        "200":
          description: New version of Data Flows set in draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-flow.DataFlowSet"
    delete:
      tags:
        - Data Flow
      summary: Delete a draft Data Flow Set
      description: Allows to delete a Data Flow Set in draft status
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: dataFlowSetId
          in: path
          required: true
          description: Data Flow Set ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: The draft has been discarded
  "/app/projects/{projectId}/data-flows/data-sources":
    get:
      tags:
        - Data Flow
      summary: Obtains data sources for a project
      description: Returns a list of all data sources associated with a project
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: List of data sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/data-flow.DataSource"
  "/app/projects/{projectId}/data-flows/feeds":
    get:
      tags:
        - Data Flow
      summary: Filtered search for Feeds of a project
      description: Allows to filter the Feeds of a project by dataSourceId (moduleId)
        and name (module and feed)
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: sourceId
          in: query
          description: Source Ids of feeds
          example: id1,id2,id3
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: name
          in: query
          required: false
          description: Name of the feed or data source (module)
          schema:
            type: string
          example: feed_temp_motor
      responses:
        "200":
          description: List of feeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/data-flow.Feed"
  "/app/projects/{projectId}/assets/{assetId}/data-flow-set/{dataFlowSetId}/properties":
    get:
      tags:
        - Data Flow
      summary: Filtered search for Properties of a Data Flow Set
      description: Allows to filter the Properties of a Project, Asset and Data Flow
        Set by name
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: dataFlowSetId
          in: path
          required: true
          description: Data Flow Set ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: name
          in: query
          required: false
          description: Property name
          schema:
            type: string
          example: average_temp_motor
      responses:
        "200":
          description: List of properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/data-flow.Property"
  "/app/projects/{projectId}/data-flows/operators":
    get:
      tags:
        - Data Flow
      summary: Search for project and global Operators
      description: Returns a list of all operators associated with a project or global
        (without project)
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: List of Operators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/data-flow.Operator"
  "/app/projects/{projectId}/data-flows/operators/{operatorId}/algorithms":
    get:
      tags:
        - Data Flow
      summary: Search for project and global Algorithms by Operator
      description: Returns a list of all algorithms associated with an Operator and a
        project or global (without project)
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: operatorId
          in: path
          required: true
          description: Operator ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: List of algorithms that belong to an operator
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/data-flow.AlgorithmList"
  "/app/projects/{projectId}/data-flows/operators/{operatorId}/algorithms/{algorithmId}":
    get:
      tags:
        - Data Flow
      summary: Retrieves an Algorithm by id
      description: Search for an Algorithm by id, operatorId and projectId
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: operatorId
          in: path
          required: true
          description: Operator ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
        - name: algorithmId
          in: path
          required: true
          description: Algorithm ID
          schema:
            type: string
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Algorithm information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-flow.Algorithm"
  "/app/projects/{projectId}/feeds":
    post:
      servers:
        - url: https://api.monom.ai/v1
      tags:
        - Data Intake
      summary: Add feed
      description: Insert feeds in data-intake layer
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project Identifier
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              description: Feed Model
              $ref: "#/components/schemas/data-intake.Feed"
      responses:
        "201":
          description: Created
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/feeds/bulk":
    post:
      servers:
        - url: https://api.monom.ai/v1
      tags:
        - Data Intake
      summary: Add feed Bulk
      description: Insert feeds bulk mode in data-intake
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project Identifier
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/data-intake.Feed"
              description: Feed Model
      responses:
        "200":
          description: Bulk Mode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data-intake.BulkResponse"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /edge/devices:
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Devices information
      description: Get all information about the devices.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/edge.Device"
        "404":
          description: Devices not found.
          content: {}
  "/edge/devices/{deviceId}":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Device information
      description: Get information about the device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.Device"
        "404":
          description: Device not found.
          content: {}
    patch:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Device properties
      description: Change the properties of the device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the mode of the device.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edge.DeviceProperties"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Device not found
          content: {}
  "/edge/devices/{deviceId}/configuration":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Device configuration
      description: Get configuration of a device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Device not found.
          content: {}
    put:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Device configuration
      description: Change the configuration of a device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the configuration of a device.
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Device not found
          content: {}
  "/edge/devices/{deviceId}/configuration/schema":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Device configuration schema
      description: Get configuration schema of the device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Device not found.
          content: {}
  "/edge/devices/{deviceId}/processing":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Processing modules information
      description: Get all information about the processing modules of a device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/edge.Processing"
        "404":
          description: Processing modules not found.
          content: {}
  "/edge/devices/{deviceId}/processing/{processingId}":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Processing module information
      description: Get information about a processing module of a device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: processingId
          in: path
          description: ID of the processing module.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.Processing"
        "404":
          description: Processing module not found.
          content: {}
    patch:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Properties of the processing module
      description: Change the properties of a processing module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: processingId
          in: path
          description: ID of the processing module.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the properties of the processing module.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edge.ProcessingProperties"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Processing module not found
          content: {}
  "/edge/devices/{deviceId}/processing/{processingId}/configuration":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Processing module configuration
      description: Get configuration of the processing module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: processingId
          in: path
          description: ID of the processing module.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "404":
          description: Device not found.
          content: {}
    put:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Processing module configuration
      description: Change the configuration of a processing module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: processingId
          in: path
          description: ID of the processing module.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the configuration of the processing module.
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Processing module not found
          content: {}
  "/edge/devices/{deviceId}/processing/{processingId}/configuration/schema":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Processing module configuration schema
      description: Get configuration schema of the processing module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: processingId
          in: path
          description: ID of the processing module.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "404":
          description: Device not found.
          content: {}
  "/edge/devices/{deviceId}/displays":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Available display names
      description: Get information about the available display names for a device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.AvailableDisplays"
        "404":
          description: Processing modules not found.
          content: {}
    post:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Create display
      description: Create display through a WebRTC connection.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      requestBody:
        description: Created webRtc connection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edge.Offer"
        required: true
      responses:
        "200":
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.Answer"
        "400":
          description: Bad request
          content: {}
        "404":
          description: Display not found
          content: {}
  "/edge/devices/{deviceId}/displays/{displayId}":
    delete:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Delete display
      description: Delete display and close the webRTC connection.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: displayId
          in: path
          description: ID of the display connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation.
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Display not found
          content: {}
    patch:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Display properties
      description: Change the properties of a display.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: displayId
          in: path
          description: ID of the display.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the properties of a display.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edge.DisplayProperties"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Display not found
          content: {}
  "/edge/devices/{deviceId}/storage":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Storage module information
      description: Get information about the storage module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.Storage"
        "404":
          description: Devices not found.
          content: {}
    patch:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Properties of the storage module
      description: Change the properties of a storage module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the properties of the storage module.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edge.StorageProperties"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Storage module not found
          content: {}
  "/edge/devices/{deviceId}/storage/configuration":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Storage module configuration
      description: Get configuration of the torage module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "404":
          description: Device not found.
          content: {}
    put:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Storage module configuration
      description: Change the configuration of a storage module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to modify the configuration of the storage module.
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Device not found.
          content: {}
  "/edge/devices/{deviceId}/storage/configuration/schema":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Storage module configuration schema
      description: Get configuration schema of the storage module.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "404":
          description: Device not found.
          content: {}
  "/edge/devices/{deviceId}/storage/events":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Events
      description: Retrive the events of a device.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Number of the page.
          example: 1
          schema:
            type: string
        - name: limit
          in: query
          description: Number of the events you want.
          example: 1
          schema:
            type: string
        - name: eventId
          in: query
          description: ID of the event. Filter, only event with the same id.
          required: false
          schema:
            type: string
        - name: correlationId
          in: query
          description: correlation id of the event. Filter, only event with the same id.
          required: false
          schema:
            type: string
        - name: timestamp
          in: query
          description: Timestamp of the event. Filter, only event with the same timestamp.
          required: false
          schema:
            type: number
        - name: dataType
          in: query
          description: Data type of the event. Filter, only events with the same data type.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name of the event. Filter, only events with the same name.
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order of the data ascending or descending.
          required: true
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        "200":
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.Page"
        "400":
          description: Bad request
          content: {}
        "404":
          description: Devices not found
          content: {}
        "503":
          description: Unable to get the events
          content: {}
  "/edge/devices/{deviceId}/dataStream":
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Data Stream HTML Server Sent Event
      description: Retrive the data processed of the device in real time. The data are
        in event format.
      parameters:
        - name: deviceId
          in: path
          description: ID of the device.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/edge.Event"
        "404":
          description: Devices not found.
          content: {}
  /edge/devices-processing/processingEnabled:
    get:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Processing Enabled
      description: Processing enabled of the all devices. if the processingEnabled is
        True, all processingEnabled property of the processing modules of all
        devices are True. if the processingEnabled is False, lest one of the
        processingEnabled property of the processing modules of all devices is
        False.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edge.ProcessingEnabled"
        "404":
          description: Devices not found.
          content: {}
    put:
      servers:
        - url: http://localhost:8080
      tags:
        - Edge
      summary: Modify Processing Enabled
      description: Modify the processing enabled of the all devices.
      requestBody:
        description: Processing enabled value.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edge.ProcessingEnabled"
        required: true
      responses:
        "200":
          description: successful operation.
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Display not found
          content: {}
  "/app/projects/{projectId}/assets/{assetId}/feedbacks":
    post:
      summary: Post a feedback on an asset
      description: Save a feedback.
      tags:
        - Feedback
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 615865149841asd8846
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: 615865149841asd8846
      requestBody:
        description: Save feedback request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/feedback.FeedbackAssetRequest"
      responses:
        "200":
          description: Feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback.FeedbackResponse"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/alerts/feedbacks":
    post:
      summary: Post a feedback on alerts
      description: Save a feedback.
      tags:
        - Feedback
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 615865149841asd8846
      requestBody:
        description: Save feedback request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/feedback.FeedbackAlertRequest"
      responses:
        "200":
          description: Feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback.FeedbackResponse"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/feedbacks/{feedbackId}/attachments":
    post:
      summary: Post feedback attachments
      description: Save feedback attachments.
      tags:
        - Feedback
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: 123
        - name: feedbackId
          in: path
          required: true
          description: Feedback ID
          schema:
            type: string
          example: 123
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - files
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Feedback attachments created
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/models":
    get:
      tags:
        - Machine Learning - Models
      summary: List filtered models
      description: Obtains all model implementations for a project. Allows filtering
        by name, sorting and paging
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: The value to apply in the filter by name
          example: Demo 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          description: Number of items per page
          example: 20
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          description: Results page you want to retrieve
          example: 1
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: The field to sort by
          example: status
      responses:
        "200":
          description: Paginated list of models
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/machine-learning.ModelsPagination"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/models/bulk-delete":
    post:
      tags:
        - Machine Learning - Models
      summary: Bulk model deletion
      description: Deletes all indicated models. This operation is NOT transactional.
        If the deletion of any element fails, the operation continues with the
        rest of the elements and returns an error code with a list of the errors
        produced.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: List of model id to be deleted
                  example:
                    - 60f59b87e0498896dcf85451
                    - 60f59b87e0498896dcf85452
                    - 60f59b87e0498896dcf85453
      responses:
        "204":
          description: All models have been successfully deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models":
    post:
      tags:
        - Machine Learning - Models
      summary: Create model
      description: Persist a new model for a project and an asset. The model will be a
        draft, so the field 'draft' will be initialized with the filled
        description and status 'DRAFT'.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/machine-learning.CreateRequest"
      responses:
        "201":
          description: Created Model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/machine-learning.Model"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}":
    get:
      tags:
        - Machine Learning - Models
      summary: Get model
      description: Get the details of the model
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: The requested model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/machine-learning.Model"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    patch:
      tags:
        - Machine Learning - Models
      summary: Update model
      description: Modifies the model data. Allows to update the description, the time
        range, the selected properties, the time aggregation and the inference
        frequency. If the time range or the selected properties have been
        changed and there was a statistical analysis (in progress or completed),
        it is automatically discarded.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/machine-learning.UpdateRequest"
      responses:
        "200":
          description: The updated model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/machine-learning.Model"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Machine Learning - Models
      summary: Delete model
      description: Deletes the model
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Model deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/draft-models/{modelId}":
    delete:
      tags:
        - Machine Learning - Models
      summary: Delete draft model
      description: Deletes the draft associated to a model. This implies to discard
        all data not published, including the statistical analysis.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Draft model deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}/default-time-aggregation":
    get:
      tags:
        - Machine Learning - Models
      summary: Get default time aggregation
      description: Returns the best-fit value for temporal aggregation for the
        selected properties for the draft.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: The suggested time aggregation
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    description: Time aggregation value
                    type: integer
                    format: int32
                    example: 60
                  unit:
                    description: |
                      Unit of time in which the value is expressed:
                       * `m` - Minutes
                       * `h` - Hours
                       * `d` - Days
                    type: string
                    enum:
                      - m
                      - h
                      - d
                    example: m
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}/statistical-analysis":
    post:
      tags:
        - Machine Learning - Models
      summary: Launches a Statistical Analysis process
      description: Calls the statistical analysis endpoint (global) with modelId and
        set the draft status 'ANALYSING'
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Statistical analysis started
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    get:
      tags:
        - Machine Learning - Models
      summary: Retrieves Statistical Analysis
      description: Returns the PDF file with the statistical analysis run for the
        model with the given id
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: PDF with the statistical analysis
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Machine Learning - Models
      summary: Cancels Statistical Analysis execution
      description: Cancels the execution of a running Statistical Analysis if any
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Statistical analysis canceled
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}/training":
    post:
      tags:
        - Machine Learning - Models
      summary: Perform model training
      description: Call training endpoint (ANOMALY DETECTION) with modelId and set the
        draft status 'TRAINING'
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Model training started
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}/published":
    post:
      tags:
        - Machine Learning - Models
      summary: Publish model
      description: Perform the model publication process, evolving the draft to a
        model and set the model status to 'PUBLISHING'
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/machine-learning.PublishRequest"
      responses:
        "204":
          description: Model publishing started
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}/started":
    post:
      tags:
        - Machine Learning - Models
      summary: Run model
      description: Starts the model execution
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Model execution started
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/assets/{assetId}/models/{modelId}/stopped":
    post:
      tags:
        - Machine Learning - Models
      summary: Stop model
      description: Stops the model execution
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
          example: 60f59b87e0498896dcf85451
      responses:
        "204":
          description: Model stopped
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/master-data/magnitudes:
    get:
      tags:
        - Master Data
      summary: Get all magnitudes
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Magnitudes information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/master-data.Magnitude"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/magnitudes/{magnitudeId}":
    get:
      tags:
        - Master Data
      summary: Find magnitude by id
      parameters:
        - name: magnitudeId
          in: path
          description: Magnitude id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Magnitude information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.Magnitude"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/magnitudes/{magnitudeId}/units":
    get:
      tags:
        - Master Data
      summary: Get all units by magnitude
      parameters:
        - name: magnitudeId
          in: path
          description: Magnitude id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Units information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/master-data.Unit"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/magnitudes/{magnitudeId}/units/{unitId}":
    get:
      tags:
        - Master Data
      summary: Find unit by magnitude and id
      parameters:
        - name: magnitudeId
          in: path
          description: Magnitude id
          required: true
          schema:
            type: string
        - name: unitId
          in: path
          description: Unit id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Unit information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.Unit"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/units/{unitId}":
    get:
      tags:
        - Master Data
      summary: Find unit by id
      parameters:
        - name: unitId
          in: path
          description: Unit id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Unit information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.Unit"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/master-data/severities:
    get:
      tags:
        - Master Data
      summary: Get all severities
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Severities information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/master-data.Severity"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/severities/{severityId}":
    get:
      tags:
        - Master Data
      summary: Find severity by id
      parameters:
        - name: severityId
          in: path
          description: Severity id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
      responses:
        "200":
          description: Severity information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.Severity"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/master-data/processes:
    get:
      tags:
        - Master Data
      summary: Get all processes
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: projectId
          in: query
          required: true
          schema:
            type: string
          description: The id of the project to search the available processes
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Processes information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/master-data.Process"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/processes/{processId}":
    get:
      tags:
        - Master Data
      summary: Find process by id
      parameters:
        - name: processId
          in: path
          description: Process id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: projectId
          in: query
          required: true
          schema:
            type: string
          description: The id of the project to search the available processes
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Process information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.Process"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/master-data/failure-modes:
    get:
      tags:
        - Master Data
      summary: Get all failure modes
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: projectId
          in: query
          required: true
          schema:
            type: string
          description: The id of the project to search the available failure modes
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Failure Mode information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/master-data.FailureMode"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/failure-modes/{failureModeId}":
    get:
      tags:
        - Master Data
      summary: Find Failure Mode by id
      parameters:
        - name: failureModeId
          in: path
          description: Process id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: projectId
          in: query
          required: true
          schema:
            type: string
          description: The id of the project to search the available failure mode
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Failure Mode information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.FailureMode"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/master-data/asset-types:
    get:
      tags:
        - Master Data
      summary: Get all asset types
      description: Returns the available asset types, both generic and project-specific
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: projectId
          in: query
          required: true
          schema:
            type: string
          description: The id of the project to search the available asset types
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Asset types information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/master-data.AssetType"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/master-data/asset-types/{assetTypeId}":
    get:
      tags:
        - Master Data
      summary: Find asset type by id
      parameters:
        - name: assetTypeId
          in: path
          description: Asset type id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            description: ISO-639 two-character language code
            example: es
        - name: projectId
          in: query
          required: true
          schema:
            type: string
          description: The id of the project to search the available asset type
          example: 60f59b87e0498896dcf85451
      responses:
        "200":
          description: Asset type information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/master-data.AssetType"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/notifications/{notificationId}":
    patch:
      tags:
        - Notification
      summary: Mark notifications as read
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: notificationId
          in: path
          required: true
          description: Notification ID
          schema:
            type: string
          example: 1234asd-234324dsa-1234eqdas
      requestBody:
        description: New Notification status
        content:
          application/json:
            schema:
              type: object
              properties:
                isRead:
                  type: boolean
                  example: true
      responses:
        "204":
          description: Marked as read
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/user-notifications-config":
    get:
      tags:
        - Notification
      summary: Retrieve User Configuration
      description: Retrieve User notifications configuration for a project. You can
        filter the list of channels you want to recover or recover all.
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: channels
          in: query
          required: false
          description: Comma separated list of channeles to retrieve.  If empty retrieve all
          schema:
            type: string
          example: mobile,web,email
      responses:
        "200":
          description: User notifications configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification.UserNotificationConfig"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    put:
      tags:
        - Notification
      summary: Update User configuration
      description: >-
        * Updates one or more channels. Channels that are not included in the
        "globalChannelsConfig" field, are not changed.
          All settings for channels that are included are updated, globalConfig an exceptions.

        * Alerts will be notified when the severity is equal to or higher than those indicated.
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notification.UserNotificationConfig"
      responses:
        "200":
          description: Asset type information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification.UserNotificationConfig"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /app/user-notifications-config/push-devices:
    post:
      tags:
        - Notification
      summary: Register User push Device
      description: Register devices for a user through a token. This token will be
        provided by the push notification provider you subscribe to. Registered
        devices will receive push notifications configured for the user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notification.PushDevice"
      responses:
        "201":
          description: Device added
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/user-notifications-config/push-devices/{token}":
    delete:
      tags:
        - Notification
      summary: Delete User push Device
      description: Delete devices for a user through a token.
      parameters:
        - name: token
          in: path
          required: true
          description: Token of push notification provider
          schema:
            type: string
          example: 1234asd-234324dsa-1234eqdas
      responses:
        "204":
          description: Device deleted
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/sse/projects/{projectId}/notifications":
    get:
      summary: Get all project notifications
      tags:
        - Server Sent Event
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
      responses:
        "200":
          description: Project notifications
          content:
            text/event-stream:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: "#/components/schemas/notification.Notification"
                    - $ref: "#/components/schemas/asset.Status"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/templates":
    get:
      tags:
        - Kinematic templates
      summary: Find templates
      description: Performs a search by name (like insensitive) with sorting and pagination
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: query
          name: name
          required: false
          description: Template name filter
          schema:
            type: string
          example: template-1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          description: Number of results per page
          example: 20
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          description: Results page you want to retrieve
          example: 1
      responses:
        "200":
          description: A list with the matching templates.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.PaginatedTemplates"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    post:
      tags:
        - Kinematic templates
      summary: Create template
      description: Creates a new (empty) template
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      requestBody:
        content:
          application/json:
            schema:
              description: Initial data needed to create the template
              properties:
                name:
                  type: string
                  description: The name of the kinematic template
                  example: Template-01
      responses:
        "200":
          description: Th created template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/templates/{templateId}":
    post:
      tags:
        - Kinematic templates
      summary: Duplicate template
      description: Clones an existing template
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template to duplicate
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "200":
          description: The template resulting from the clone.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    get:
      tags:
        - Kinematic templates
      summary: Get template
      description: Retrieves a template by id
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template to retrieve
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "200":
          description: The requested template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    patch:
      tags:
        - Kinematic templates
      summary: Partial template update
      description: Allows to set the edition mode and the template status
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template to update
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      requestBody:
        content:
          application/json:
            schema:
              description: Initial data needed to create the template
              properties:
                inEdition:
                  type: boolean
                  description: If true, sets the edit mode; if false, sets the display mode. If
                    null, the edit/display mode is not updated.
                  example: true
                status:
                  type: string
                  description: If reported, sets the status of the template
                  example: INACTIVE
      responses:
        "200":
          description: The template resulting from the partial update.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    put:
      tags:
        - Kinematic templates
      summary: Update template
      description: This action completely replaces the template configuration.
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template to update
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "200":
          description: The template resulting from the update.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
    delete:
      tags:
        - Kinematic templates
      summary: Delete template
      description: Deletes the template. This is a logic deletion.
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template to update
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "204":
          description: Template deleted.
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/projects/{projectId}/templates/{templateId}/published":
    post:
      tags:
        - Kinematic templates
      summary: Publish template
      description: Performs the publishing operation by cascading the underlying
        executions. If there was already a published version of the template, it
        marks it as inactive.
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template to duplicate
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "200":
          description: The template resulting from the publication.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/projects/{projectId}/templates/{templateId}/draft":
    delete:
      tags:
        - Kinematic templates
      summary: Discard draft
      description: Deletes the template draft. This is a physical deletion.
      parameters:
        - in: header
          name: Accept-Language
          description: ISO-639 two-character language code
          required: true
          schema:
            type: string
            example: es
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
        - in: path
          name: templateId
          description: ID of the template whose draft is to be discarded.
          required: true
          schema:
            type: string
          example: 61a68a1dd8c6514768d5a808
      responses:
        "200":
          description: The template resulting from draft discarding.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/templates.Template"
        "400":
          description: Bad request.
        "401":
          description: Authorization information is missing or invalid.
        "403":
          description: The user is not authorized to perform the requested operation on
            the indicated resource.
        "404":
          description: Resource not found.
        5XX:
          description: Unexpected error.
        default:
          description: Error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/threshold-alerts/{alertId}/recognitions":
    get:
      summary: Get alert recognitions
      tags:
        - Time Series
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: alertId
          in: path
          required: true
          description: Threshold Alert ID
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: startDate
          in: query
          required: true
          description: Epoch millis of start date filter.
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Epoch millis of end date filter.
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Alert recognitions information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/property.AlertRecognition"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/threshold-alerts/{alertId}/property-values":
    get:
      summary: Get alert property values
      tags:
        - Time Series
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: alertId
          in: path
          required: true
          description: Threshold Alert ID
          schema:
            type: string
          example: yi7y8ty67t89767t87
      responses:
        "200":
          description: Alert property values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/property.PropertyValue"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/threshold-alerts/{alertId}/severities":
    get:
      summary: Get alert severity transitions
      tags:
        - Time Series
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: alertId
          in: path
          required: true
          description: Threshold Alert ID
          schema:
            type: string
          example: yi7y8ty67t89767t87
      responses:
        "200":
          description: Alert severity transition
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/property.SeverityTransition"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/property-values":
    get:
      tags:
        - Time Series
      summary: Get property values
      description: Obtains the values of a property in a time interval. The result
        will be an array with all the values that the property has taken in the
        indicated time interval. For each value the instant in which it has been
        produced is indicated.
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: propertyName
          in: query
          required: true
          description: Property Name
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: buckets
          in: query
          required: true
          description: Limit amount buckets
          schema:
            type: number
          example: 120
        - name: startDate
          in: query
          required: true
          description: Interval start date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Interval end date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Property data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/property.PropertyValue"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/property-values-trend":
    get:
      summary: Get property values trend
      description: "Gets the history of values in a time interval, grouped in buckets.
        Each bucket will contain the minimum, average and maximum values that
        the property has taken in the interval of the bucket. The interval for
        each bucket is calculated: timestamp_diff_milli(endDate,
        starDate)/buckets Buckets that do not contain data are not returned"
      tags:
        - Time Series
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: propertyName
          in: query
          required: true
          description: Property Name
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: buckets
          in: query
          required: true
          description: Limit amount buckets
          schema:
            type: number
          example: 120
        - name: startDate
          in: query
          required: true
          description: Interval start date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Interval end date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Property Trend
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/property.PropertyTrend"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/property-values-latest":
    get:
      summary: Get property latest
      description: Obtains latest property value within time range. If the value was
        obtained in the middle of an alert, it returns the severity of the alert
        at that time.
      tags:
        - Time Series
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: propertyName
          in: query
          required: true
          description: Property Name
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: startDate
          in: query
          required: true
          description: Interval start date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Interval end date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Latest Property Value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/property.PropertyGauge"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/severities":
    get:
      summary: Get alarm severity transitions
      description: Obtains the severity transitions of an alarm associated with the
        selected property in the interval time range.
      tags:
        - Time Series
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
          example: monom-dev
        - name: assetId
          in: path
          required: true
          description: Asset ID
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: propertyName
          in: query
          required: true
          description: Property Name
          schema:
            type: string
          example: yi7y8ty67t89767t87
        - name: startDate
          in: query
          required: true
          description: Interval start date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Interval end date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Alarm severity transition
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/property.SeverityTransition"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/ml/default-time-range":
    get:
      tags:
        - Time Series
      summary: Get default time range
      description: Calculates the time range that contains the totality of the data on
        the selected properties
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: properties
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: List of properties from which to retrieve data
          example:
            - prop1
            - prop2
            - prop3
      responses:
        "200":
          description: Default time range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.TimeRange"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/ml/properties-data":
    get:
      tags:
        - Time Series
      summary: Get data in time range
      description: Obtains data on the selected properties in the set time range. The
        result will be a temporary aggregation with as many elements as
        indicated buckets. Each bucket will contain the total number of data
        found for the indicated properties in the bucket interval.
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: properties
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: List of properties from which to retrieve data
          example:
            - prop1
            - prop2
            - prop3
        - name: buckets
          in: query
          required: true
          description: Limit amount buckets
          schema:
            type: number
          example: 120
        - name: startDate
          in: query
          required: true
          description: Interval start date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Interval end date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Properties data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/property.PropertiesData"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  "/app/projects/{projectId}/time-series/assets/{assetId}/ml/alarms-data":
    get:
      tags:
        - Time Series
      summary: Get alarms in time range
      description: Obtains the alarm data associated with the selected properties in
        the set time range. The result will be a collection with as many
        elements as indicated buckets. Each bucket will contain the severity of
        the bucket and an array with the data of the alarms included in it.
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
          example: 60f59b87e0498896dcf85451
        - name: assetId
          in: path
          required: true
          schema:
            type: string
          description: Asset ID
          example: 60f59b87e0498896dcf85451
        - name: properties
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: List of properties from which to retrieve data
          example:
            - prop1
            - prop2
            - prop3
        - name: buckets
          in: query
          required: true
          description: Limit amount buckets
          schema:
            type: number
          example: 120
        - name: startDate
          in: query
          required: true
          description: Interval start date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
        - name: endDate
          in: query
          required: true
          description: Interval end date
          schema:
            type: string
            format: date-time
          example: 2020-01-24T15:00:22.222Z
      responses:
        "200":
          description: Alarms data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/property.AlarmsData"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
  /ml/bucket-calculation:
    get:
      tags:
        - Time Series
      summary: Calculate bucket
      description: Calculates the appropriate size and number of buckets given a time range
      parameters:
        - name: Accept-Language
          in: header
          description: "Language code, pattern: ISO-639_ISO-3166."
          required: true
          schema:
            type: string
          example: es_ES
        - name: startDate
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: Start of date range
          example: 1733517346000
        - name: endDate
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: End of date range
          example: 1733517346000
      responses:
        "200":
          description: Default time range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/machine-learning.BucketCalculation"
        default:
          description: Error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/common.MonomError"
